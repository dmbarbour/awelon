%
% limiting to avmboot so I can use this in bootstrap
import avmboot

% this module: `dp` which stands for `data plumbing`.
%
%  Awelon's hard-wired environment is simply a pair: (s * e).
%
%  Numbers, text, and blocks are placed on 's', which represents the
%  current stack. The behavior of literals is one of the few features
%  hard-wired into Awelon (for simplicity). The type 'e' represents
%  the extended environment, and is not buried by literals. 
%
%  The interpretation and structure of 'e' is determined by libraries
%  and convention. It is possible to create a whole new environment
%  model, but overthrowing convention is not cheap. It would require
%  rewriting or adapting a large number of libraries. Consequently, 
%  it is important get this environment "right" the first time.
%
%  Awelon's standard environment is:
%
%     (s * (h * (p * (sn * lns))))
%
%   s - current stack, where literals are added and actions occur
%   h - the 'hand', can take/put to current stack, carries values
%   p - the 'powerblock', source of authority and real-world access
%   sn - current stack name (needed if we 'goto' another stack)
%   lns - list of named stacks, access via load/store/goto
%
%  The list of named stacks can easily be used for extensions to the
%  environment; it's also a decent location for singletons. Mostly,
%  multipe stacks are useful if we have multiple concurrent tasks.
%
%  This module builds above the primitive data manipulations to help
%  integrate the standard environment. There are a several 'metaphors'
%  for data plumbing that programmers can use:
%
%     roll/dup/etc - stack-based programming
%     zipper ops - navigate structured object on current stack
%     take/put/juggle - using the hand as a temporary storage
%     load/store - treating named stacks as remote memory
%     goto - switch which named stack we're in
%
%  In addition, developers can apply behaviors in a fresh environment.
%  
%  I would also like to support lenses, prisms, traversals, folds. 
%
%  Also, it is feasible to support local variables as a stack object
%  (by modeling a record, and searching for it). This may be useful
%  for tricky plumbing problems or using Awelon as an intermediate 
%  language (for a more direct translation).
%
%  In practice, esoteric data plumbing should be very rare. But it
%  makes a nice exercise.
%


% Primitives

first  = avmboot:first     %  (x->x')*(x*y) -> (x'*y)
swap   = avmboot:swap      %  (a*b) -> (b*a)
assocl = avmboot:assocl    %  (a*(b*c)) -> ((a*b)*c)
rot3   = avmboot:rot3      %  (a*(b*(c*d))) -> (c*(a*(b*d)))
intro1 = avmboot:intro1    %  a -> 1*a
elim1  = avmboot:elim1     %  1*a -> a

% Basic data plumbing
%  These operators are generic, with no knowledge of the environment.
%  They are mostly obtained from a logic program, and are used to 
%  support ad-hoc data plumbing of the environment. These aren't
%  very intuitive in their construction, and mostly exist to help
%  with automatic discovery of block-free solutions.

assocr = swap assocl swap assocl swap          % ((a*b)*c) -> (a*(b*c))
rot2   = intro1 rot3 intro1 rot3 elim1 elim1   % (a*(b*c)) -> (b*(a*c))
rot4   = assocl rot3 rot2 assocr rot3          % (a*(b*(c*(d*e)))) -> (d*(a*(b*(c*e))))
rot5   = assocl rot4 rot2 assocr rot3          % simple rotate of five elements
rot6   = assocl rot5 rot2 assocr rot3          % simple rotate of six elements
pzip   = assocr rot3 rot2 assocl               % ((a*b)*(c*d)) -> ((a*c)*(b*d))

% Simple Stack Manipulations 
%   rollK: will rotate the top K items on the stack
%   expand: open a pair to a pair
%   reifyStack: capture current stack as an object 
%   restoreStack: expand stack-object into empty stack 
%
% todo: get some copy operations working
%
% Most people have a hard time tracking more than a few items on the
% stack. Automatic visualization tools should help. 
roll2  = swap rot3 rot2 swap                   % ((a*(b*s))*e) -> ((b*(a*s))*e)          
roll3  = swap rot4 rot2 swap                   % ((a*(b*(c*s)))*e) -> ((c*(a*(b*s)))*e)
roll4  = swap rot5 rot2 swap                   % roll 4th item to top 
roll5  = swap rot6 rot2 swap                   % roll 5th item to top
reifyStack = intro1 rot2 assocl                % (s*e) -> ((s*1)*e)
restoreStack = assocr rot2 elim1               % ((s*1)*e) -> (s*e)
intro1S = intro1 assocl                        % (s*e) -> ((1*s)*e)
elim1S  = assocr elim1                         % ((1*s)*e) -> (s*e)

% Expand and Collapse data on the stack:
%
%     xf - first element in pair becomes top
%     xs - second element in pair becomes top
%     cf - top element becomes first in pair
%     cs - top element becomes second in pair
%
% Developers can use these to access internal objects, manipulate
% them, rearrange them. For example, `xf cs` would flip an (a*b) 
% pair to a (b*a) pair. Or `xf xs` will extract the 'g' value in
% ((f*g)*h), leaving the stack (g*(f*(h*s))).
%
%   Between these operations, developers can access
%   deep inner structure. Unfortunately, they easily
%   can lose track of where things were. Be careful.
%
xf = swap rot2 assocr rot3 swap        % (((a*b)*s)*e) -> ((a*(b*s))*e)
xs = assocr pzip rot2 assocl           % (((a*b)*s)*e) -> ((b*(a*s))*e)
cf = swap rot3 rot3 assocl rot2 swap   % ((a*(b*s))*e) -> (((a*b)*s)*e)
cs = assocr rot2 pzip assocl           % ((b*(a*s))*e) -> (((a*b)*s)*e)

% Data Surgery with Zippers
% 
% A zipper (data structure) is a pure way to  navigate and manipulate
% tree-structured or list-structured data. The zipped structure has
% enough information to restore its structure, keeping any changes.
%
% In Awelon, zipper operations apply to top object on current stack. 
%
%    zwrap - prepare zipper; stack object is initial target
%    zf - if target was (x*y), x is now target; undo with zuf
%    zs - if target was (x*y), y is now target; undo with zus
%    zu - undoes last zipper navigation (selects zuf or zus)
%    zunwrap - fully exit and unwrap zipper, even if deep
%    zunwrap_ - just unwrap zipper
%
% Knowing the representation of the zipper structure isn't essential,
% but it might be interesting to some people. 
%
%    zwrap :: x <~> x*(1*1) :: zunwrap_ (on stack)
%    zf    :: (x*y)*(l*r) <~> x*(1*(y*(l*r))) :: zuf
%    zs    :: (x*y)*(l*r) <~> y*((x*l)*r)     :: zus
%
% The 'zu' and 'zunwrap' operations must perform introspection. 
%
% To manipulate the zipper target, developers will usually use an
% operation such as:
%   
%    zswap - switch target of zipper (2nd) with object on stack (1st)
%    zpop  - move target to top of stack (unit placeholder)
%    zpush - undo zpop
%
zwrap = intro1 intro1 assocl rot2 pzip assocl  
zunwrap_ = assocr pzip rot2 assocr elim1 elim1  
zf = assocr xf intro1 assocl roll2 assocl 
zuf = assocr roll2 assocr elim1 cf assocl
zs = assocr xf roll3 cs roll2 assocl
zus = assocr roll2 xf roll3 cs assocl
zswap = cf assocr roll2 assocl xf
zpop = intro1S zswap
zpush = zswap elim1S
% TODO: zu, zu*
zu = % look at wrapper to decide step back
zu* = % iterative zu
zunwrap = zu* zunwrap_

% Thoughts: zipper for the sum type? maybe should have a 
% different name for it?


% Hands to Carry Things
%
% In Awelon, the 'hand' is a secondary stack. It provides convenient
% scratch storage for deep operations on the current stack, and an
% intuitive basis for data-plumbing between stacks. 
%
% Clean Hands policy: words should have a neutral affect on the hand
%   (excepting explicit and obvious hand-manipulation behaviors)
% 
% The hand currently is not used for active content. 
%
take  = pzip rot2                             % ((x*s)*(h*e)) -> (s*((x*h)*e))
put   = rot2 pzip                             % (s*((x*h)*e)) -> ((x*s)*(h*e))
juggle2 = rot2 swap rot3 rot2 swap rot2       % (s*((x*(y*h))*e)) -> (s*((y*(x*h))*e))
juggle3 = rot2 swap rot4 rot2 swap rot2       % (s*((x*(y*(z*h)))*e)) -> (s*((z*(x*(y*h)))*e))
juggle4 = put juggle3 take juggle2
juggle5 = put juggle4 take juggle2
take2 = take take
take3 = take take take
take4 = take take take take
take5 = take take take take take
put2  = put put
put3  = put put put
put4  = put put put put  % i think i can i think i can
put5  = put put put put put

%
% Programmers can also perform some manipulations of the hand. 
%   reifyHand - capture contents of hand as value in hand
%   restoreHand - expand value in hand to contents in hand
%   swapStackHand - switch stack and hand.
%
reifyHand = intro1 rot3 assocl rot2          % (s*(h*e)) -> (s*((h*1)*e))
restoreHand = rot2 assocr rot3 rot3 elim1    % (s*((h*1)*e)) -> (s*(h*e))
swapStackHand = rot2                         % (s*(h*e)) -> (h*(s*e))
% Other useful hand ops?
%  takeCopy
%  putCopy
%  discard - destroy item in hand


% Environment Manipulations
%
%  (todo) fix for new environment model... need to choose name for
%  initial stack? Maybe "main"?
%
%  wrapE - wrap a value in a fresh environment; wrapped value becomes
%    the only element in a fresh env's current stack. If `wrapE` is 
%    called without a specific target, it captures the current 
%    environment.
%  wrapS - capture current stack as a value, which is afterwards the
%    only value on the current stack. 
%  unwrapE/unwrapS - reverse these manipulations.
%
% The normal block applicators will wrap a new environment around the
% arguments before applying the block. This allows subprograms to use
% the multi-stack and hands concept, but prevents accidental coupling
% with the current environment. 
%
%wrapE = intro1 swap intro1 swap intro1 intro1 intro1 assocl swap
%unwrapE = swap assocr elim1 elim1 elim1 swap elim1 swap elim1
%wrapS = assocr intro1 rot3 pzip assocl rot2 assocl
%unwrapS = swap rot3 assocr rot2 elim1 rot3 rot3 swap




% Combinators: remove a block from top of the current stack, and 
%   apply it to all or part of the environment.
%
%   apply: target whole environment (as if block is coded inline)
%   appX: target top item on stack (without fresh environment)
% 
% Note that these do not wrap the input in a fresh environment, so
% only `appE` is directly usable.
%
apply = assocr intro1 swap assocr first swap elim1
appX = assocr rot2 assocr rot3 first assocl



