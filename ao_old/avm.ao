% Awelon Virtual Machine definition module 'avm'
%  v0.01
%  David Barbour, 2013 August

import dp

% The task of this module is to provide a description of Awelon's
% primitive behaviors to the compiler or interpreter. This must
% include the bootstrap primitives.
%
% At the moment, there are two issues I need to address:
% 
%   1) decide what primitives to describe
%   2) decide how to describe these primitives
%
% Regarding the latter point, I think one feature I want is a behavior
% to compute the typerep of the output given the typerep of the input.
% In addition, I want english descriptors. But for the moment I could
% limit it to just some descriptors and names!
%
%   primitive behaviors
%     basic data plumbing (first, assocl, swap, rot3, intro1, elim1)
%     types are represented as blocks operating on typerep
%
%   capabilities
%     I am not entirely sure how to best model capabilities. They
%     aren't really Awelon code, but must still be represented in a
%     distributed system. Adding a 'capability' primitive that can
%     process a set of static values seems useful, as does recording
%     the expected type somehow.
%
%   partitions: perhaps support inheritance... or partitions like
%     typeclasses, partition types can inherit properties or prims
%     of another, just to avoid repetition.
%       (something like typeclasses might be suitable for basic types, too)
%
%   support for ad-hoc type attributes:
%     e.g. shapes and colors (for debugging / display)
%
%   a few non-primitive behaviors (provided as blocks)
%     literal insert action
%     default environment-builder for the initial input
%
%   equational laws (not sure how to represent these yet)
%     I'd like to support code-proofs. E.g. `addCommutes` and
%     so on.
%   rewrite rules (ditto)
%
%   application models: just input types, really.
%
% This module executes in a bootstrap environment (only a few
% primitives) but can import other modules that are restricted
% to avmboot.


% Basic Data Plumbing Primitives
%
%   first    ((x~>x')*(x*y))~>(x'*y)
%   assocl   (x*(y*z))~>((x*y)*z)
%   swap     (x*y)~>(y*x)
%   intro1   x~>(1*x)
%   elim1    (1*x)~>x
%   rot3     (a*(b*(c*d)))~>(c*(a*(b*d)))
%  
%   left     ((x~>x')*(x+y))~>(x'+y)
%   assocl+  (x+(y+z))~>((x+y)+z)
%   mirror   (x+y)~>(y+x)
%   intro0   x~>(0+x)
%   elim0    (0+x)~>x
%   rot3+    (a+(b+(c+d)))~>(c+(a+(b+d)))
%
% The left, mirror, etc. primitives are polymorphic for dynamic and 
% static sums (x|y). I could have overloaded first/swap/etc. to work
% with sums too, but I decided that the distinction between sum and
% product is significant enough that developers should need a parallel
% vocabulary. The distinction between static and dynamic sums, OTOH,
% is limited to a few distribution and merge operators. Basic data
% plumbing should all be the same.


% Substructural Types 
%
%     noCopy (B ~> B') - may not be copied; use at most once
%     noDrop (B ~> B') - may not be dropped; use at least once
%
% Linearity for a block is declared by marking a block both
% affine and relevant. Note: when a `noDrop` block is copied,
% the second copy is still `noDrop` but the first does not 
% have this property. 
%


% Uniqueness Source
%
%   A uniqueness source is a static source of uniqueness (though it
%   may be a static argument to a dynamic behavior). It essentially
%   enforces the construction of unique URL-like directory paths 
%   within the source code. 
%
%   Unique values become the basis for:
%     sealer/unsealer pairs
%     exclusive binding to state
%     unique identifiers
%
%   The unique source can be dropped, but cannot directly be copied.
%   Instead of copies, the uniquness source can split a subdirectory
%   with a static text identifier. This text provides stability for
%   live programming, persistence, and changes in source code.
%
%     splitUniqueSource :: (Text * Up) ~> (Uc * Up')
%     dropUniqueSource :: Ux ~> Unit
%
%   After split, the parent cannot reuse that child name. The child 
%   has a fresh set of identifiers, though names problematic for a
%   URL or filesystem will still be rejected. 
%
%   (Todo: support a mechanism for unique sources to split on dynamic 
%   collection-oriented operations, once I know what I'm doing there.)


% Debugging...
%
%   error :: (Text*x)~>x
%   warn  :: (Text*x)~>x
%
% error and warn apply unless the evaluator can statically exclude
% them. I'll probably also want variations that apply only if 
% actually observed (maybe `fail` and `debug`).


% Static Introspections: lots of simple questions...
%
%   testCross :: x@(PartitionID * PartitionID) ~> (x | x)




% Manipulating Static Values - we do a lot of this in Awelon
%
% Statics can generally be captured, copied, or dropped. 
%   staticTextCapture   :: T~>(1~>T)
%   staticNumberCapture :: N~>(1~>N)
%   staticBlockCapture  :: B~>(1~>B) (inherits affine/relevant properties)
%
%   staticTextCopy      :: T~>(T*T)
%   staticNumberCopy    :: N~>(N*N)
%   staticBlockCopy     :: B~>(B*B)  (error for affine blocks)
%
%   staticTextDrop      :: T~>1
%   staticNumberDrop    :: N~>1
%   staticBlockDrop     :: B~>1      (error for relevant blocks)
%
% Numbers can be manipulated in several useful ways...
%
%   staticNumberAdd (N*N)~>N
%   staticNumberAdd (N*N)~>N
%   staticNumberMul (N*N)~>N
%   staticNumberInv; assert non-zero; N~>N
%   staticNumberNeg N~>N
%   staticNumberMin (N*N)~>N
%   staticNumberMax (N*N)~>N
%   staticNumberCmp  
%   

%   testIsStaticNumber x~>(x|x)
%   testIsStaticIntegral x~>(x|x)
%   testNumberLessThan (N*N)~>((N*N)|(N*N)) -- less-than

% Static Text Operators
%   staticTextAppend  (T*T)~>T
%   staticTextSplitAt (T*T)~>(T*T)
%   staticTextCopy T~>(T*T)
%   staticText
%   


% Temporal Primitives?
%
%   delay :: (Number * x) ~> x'
%   synch :: x ~> x'
%   useAfter   :: (Number * block) ~> block
%   useBefore  :: (Number * block) ~> block
%
% Note: I'm not sure I want synch and delay as primitives. Not every
% parititon should support them. However, 


% Closures and Objects? Capture for dynamic signals?
%
% It might be useful to provide first-class support for closures?
%
%    capture :: ((x*y)~>z)*x ~> (y~>z)  (or maybe)
%    capture :: ((x*y)~>z)*x ~> {x}(y~>z)
%
% Basically it would capture the `x` as it is, but not apply it.
% This sort of closure wouldn't be too hard to use, and would
% naturally inherit any affine or relevant types of its inputs.



% Collection-Oriented Awelon - matrices of signals
% 
% 




%
% Note: I might not distinguish static choice and offerings at the
% primitive layer. I wonder how effectively I could model them in
% the language.
% 

% Static Copy Operators
%   staticBlockCopy B~>(B*B)

% Static Number Operators

% Product Primitives


% Thoughts: Should I develop an Awelon Byte Code? 
%   Might be worth doing. Assign different primitives
%   (and maybe a few common library operations) to unique
%   codepoints in UTF-8... use the environment to carry
%   blocks and compress them.
%
%   But the only real benefit would be compression.
%   Not enough for real consideration right now.
























