ord aatree

@doc.DataMaps
"A 'map' in computer science typically refers to an abstract, finite collection of (key, value) pairs where each key appears at most once in the collection. Other terms used for the same or similar ideas include 'dictionary' and 'associative array'. Typical operations on maps include:
 
     add, remove, or update (key, value) pairs
     lookup value given the key, or test if key exists
     compose two maps in various ways (join, union, etc.)
     stream or list processing of (key*value) pairs
 
 Shorthand type: (K,V)`Map
 
 A map is typically implemented using hashtables or binary search trees. In this case, for AO words of the `.m` suffix, we'll be favoring a self-balancing tree with worst-case O(lg N) operations. The map as a whole will additionally track a key comparison function `(K*K)â†’Ord` and encapsulate everything behind a discretionary `{:m}` sealer (to prevent accidental manipulations).
 
 While keys must have homogeneous value type for comparisons, the values may have heterogeneous and substructural types, e.g. dependent upon the key. Maps may be used to model ad-hoc record types.
 
 Many related types can be trivially modeled above maps, including multi-maps (via collection type for values), sets (unit values), and multi-sets (counter values). But maps are not always ideal, e.g. if developers have a large collection of maps all using the same keys then some sort of table-based data structure would be more appropriate. If keys share a lot of structure, then a trie may be more appropriate. If keys represent spatial coordinates, a kd-tree may be more appropriate. I would love to have a wide array of moderately specialized data structures for common use-cases.
~
@doc.suffix.m doc.DataMaps


