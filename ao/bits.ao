boolean streams lists

@doc.import.bits "functions for working with bits and bytes and fixed-width words"

@doc.BinaryData
"Raw binary data can represent sensor inputs, controller outputs, compressed audio or visual information, cipher texts, cryptographic signatures, and more. Embedding binaries in Awelon Bytecode (ABC) is convenient, e.g. allowing partial evaluation and secure distribution through ABC's resource model. Awelon project uses a simple strategy for efficient storage and transmission of embedded binary data:
 
 1. encode binary data in a base16 alphabet
 2. special compression pass for base16 data
 
 The compression format is very simple: header byte 0xF8, length byte L (0..253), followed by L+3 bytes of data. This will be decompressed into (L+3)*2 base16 characters. If the symbol 0xF8 appeared normally, we could escape that as 0xF8 0xFE. However, 0xF8 won't ever be encountered if compressing UTF-8 or ABC. This results in 0.8% overhead for compressing large embedded binaries, and breaks even with base64 encodings at just 6 bytes. The base16 compression is followed by a more conventional compression, but the total worst-case expansion will be under 2.4% for large binaries.
 
 The base16 alphabet for ABC is not the standard `0-9a-f`. Instead we use:
 
     bdfghjkmnpqstxyz            i.e. `a-z` minus `aeiou` and `vrwlc`
 
 This alphabet avoids interference with other Awelon bytecodes or natural language text. Any large string of ABC's base16 characters is most likely intended for binary processing. There is also very little risk of spelling offensive words. The compression pass is case sensitive; lower case only.
 
 Note: This encoding only affects storage and bandwidth costs. For processing purposes, ABC must still work with strings or streams of base16 characters. Processing of base16 strings may eventually (in the very long term) be accelerated by a few ABCD functions.
~
@doc.BinariesInABC doc.BinaryData
@doc.abcBase16Alphabet "alphabet used to encode binary data in ABC in base16, representing digits 0..15"
@abcBase16Alphabet "bdfghjkmnpqstxyz"

@doc.ABC16toN16 "convert an ABC base16 character to an integer in 0..15"
@doc.N16toABC16 "convert an integer in 0..15 to the associated ABC character"

@doc.wordToBitList 
"Translate a word to a list of bits. 
 
     N(word) N(width) -- (1+1)`L
 
 A word of width N should be a value in the range 0 to 2^N - 1. For example, an octet is a word of width 8, encoding numbers in range 0..255. This function takes a single word and a given width, and produces a list of bits with big-endian orientation. Each bit is encoded as a (1+1) sum, in the left for a zero bit. 
~
@wordToBitList 
    .rw assertNatural empty.l swap
    [pushBit.wordToBitList] .wl repeat 
    assertEQz drop
@pushBit.wordToBitList 
    %r 2 %rQ 0 %r>l
    toBoolean
    %rzwrzwlVlwl
@x.pushBit.wordToBitList 2 .divMod take 0 .gtb cons.l put

@octetToBitList
 assertOctet empty.l swap
 pushBit.wordToBitList pushBit.wordToBitList
 pushBit.wordToBitList pushBit.wordToBitList
 pushBit.wordToBitList pushBit.wordToBitList
 pushBit.wordToBitList pushBit.wordToBitList
 drop

@doc.bitListToWord "(1+1)`L -- N(word); word size implicit from list"
@bitListToWord 0 swap [pushBit.bitListToWord] each.l
@pushBit.bitListToWord [mul2] [mul2 inc] if_

@test.wordToBitList
    165 9
    wordToBitList
    bitListToText
    "010100101" assertEQ

@test.octetToBitList
    "Pack my box with five dozen liquor jugs." copy
    [[8 wordToBitList] map.l] [[octetToBitList] map.l] bi
    assertEQ1 [bitListToWord] map.l put assertEQ1

@doc.bitListToWordK "(1+1)`L K(width) -- N(word); take or fill K bits from list"
@bitListToWordK 0 unrot [step.bitListToWordK] swap repeat drop
@step.bitListToWordK [pushBit.bitListToWordK] [inR mul2d] if
@pushBit.bitListToWordK wx .rw pushBit.bitListToWord .wl

@bitListToOctet 8 bitListToWordK

@doc.bitListToText
"(1+1)`L -- text; e.g. of form "01100001"
~
@bitListToText [bitToChar] map.l
@bitToChar [chr:0] [chr:1] if_

@chr:0 48
@chr:1 49

@doc.bitStreamToText "(1+1)`S -- char`S; characters '0' and '1'"
@bitStreamToText [bitToChar] map.s

@eqv.bitStreamText [bitStreamToText fromStream.l] [fromStream.l bitListToText]
@eqv.mapStreamOrList [map.s fromStream.l] [swap fromStream.l swap map.l]

@doc.textBitsToList
"textBits -- (1+1)`L; textBits is of form "01100001" (no other characters)
~
@textBitsToList [chr:0 gtb] map.l
@textBitsToWord 0 swap [chr:0 gt pushBit.bitListToWord] each.l

@doc.wordStreamToBitStream "word`S width -- bool`S (bigendian bit orientation)"
@wordStreamToBitStream [wordToBitList fromList.s] bind map.s flatten.s

@doc.octetStreamToBitStream "octet`S -- bool`S (bigendian bit orientation)"
@octetStreamToBitStream [octetToBitList fromList.s] map.s flatten.s

@test.octetStreamToBitStream
    "woman" dup fromList.s octetStreamToBitStream
    bitStreamToText fromStream.l
    "0111011101101111011011010110000101101110" assertTextEQ1

@doc.bitStreamToWordKStream   "(1+1)`S K(width) -- wordK`S"
@doc.bitStreamToOctetStream   "(1+1)`S -- octet`S"
@bitStreamToWordKStream       copy taking.s put [bitListToWordK] bind map.s 
@bitStreamToOctetStream       8 taking.s [bitListToOctet] map.s

@test.bitStreamToOctetStream
    "pack my box with five dozen liquor jugs" dup
    fromList.s octetStreamToBitStream
    bitStreamToOctetStream fromStream.l
    assertTextEQ1


