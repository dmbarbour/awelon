boolean streams lists

@doc.import.bits "functions for working with bits and bytes and fixed-width words"

@doc.wordToBitList 
"Translate a word to a list of bits. 
 
     N(word) N(width) -- (1+1)`L
 
 A word of width N should be a value in the range 0 to 2^N - 1. For example, an octet is a word of width 8, encoding numbers in range 0..255. This function takes a single word and a given width, and produces a list of bits with big-endian orientation. Each bit is encoded as a (1+1) sum, in the left for a zero bit. 
~
@wordToBitList 
    %rw assertNatural empty.l swap
    [pushBit.wordToBitList] %wl repeat 
    assertEQz drop
@pushBit.wordToBitList 
    %r 2 %rQ 0 %r>l
    toBoolean
    %rzwrzwlVlwl
@x.pushBit.wordToBitList 2 .divMod take 0 .gtb cons.l put

@octetToBitList
 assertOctet empty.l swap
 pushBit.wordToBitList pushBit.wordToBitList
 pushBit.wordToBitList pushBit.wordToBitList
 pushBit.wordToBitList pushBit.wordToBitList
 pushBit.wordToBitList pushBit.wordToBitList
 drop

@doc.bitListToWord "(1+1)`L -- N(word); word size implicit from list"
@bitListToWord 0 swap [pushBit.bitListToWord] each.l
@pushBit.bitListToWord [mul2] [mul2 inc] if_

@test.wordToBitList
    0xa5 9
    wordToBitList
    bitListToText
    "010100101" assertEQ

@test.octetToBitList
    "Pack my box with five dozen liquor jugs." copy
    [[8 wordToBitList] map.l] [[octetToBitList] map.l] bi
    assertEQ1 [bitListToWord] map.l put assertEQ1

@doc.bitListToWordK "(1+1)`L K(width) -- N(word); take or fill K bits from list"
@bitListToWordK 0 unrot [step.bitListToWordK] swap repeat drop
@step.bitListToWordK [pushBit.bitListToWordK] [inR mul2d] if
@pushBit.bitListToWordK wx %rw pushBit.bitListToWord %wl

@bitListToOctet 8 bitListToWordK

@doc.bitListToText
"(1+1)`L -- text; e.g. of form "01100001"
~
@bitListToText [bitToChar] map.l
@bitToChar [0x30] [0x31] if_

@doc.bitStreamToText "(1+1)`S -- char`S; characters '0' and '1'"
@bitStreamToText [bitToChar] map.s

@id.bitStreamText [bitStreamToText fromStream.l] [fromStream.l bitListToText]
@id.mapStreamOrList [map.s fromStream.l] [swap fromStream.l swap map.l]

@doc.textBitsToList
"textBits -- (1+1)`L; textBits is of form "01100001" (no other characters)
~
@textBitsToList [0x30 gtb] map.l
@textBitsToWord 0 swap [0x30 gt pushBit.bitListToWord] each.l

@doc.wordStreamToBitStream "word`S width -- bool`S (bigendian bit orientation)"
@wordStreamToBitStream [wordToBitList fromList.s] bind map.s flatten.s

@doc.octetStreamToBitStream "octet`S -- bool`S (bigendian bit orientation)"
@octetStreamToBitStream [octetToBitList fromList.s] map.s flatten.s

@test.octetStreamToBitStream
    "woman" dup fromList.s octetStreamToBitStream
    bitStreamToText fromStream.l
    "0111011101101111011011010110000101101110" assertTextEQ1

@doc.bitStreamToWordKStream   "(1+1)`S K(width) -- wordK`S"
@doc.bitStreamToOctetStream   "(1+1)`S -- octet`S"
@bitStreamToWordKStream       copy taking.s put [bitListToWordK] bind map.s 
@bitStreamToOctetStream       8 taking.s [bitListToOctet] map.s

@test.bitStreamToOctetStream
    "pack my box with five dozen liquor jugs" dup
    fromList.s octetStreamToBitStream
    bitStreamToOctetStream fromStream.l
    assertTextEQ1

