
@doc.suffix.abc "A word for each of the ABC codes."

@doc.l.abc "(a*(b*c))→((a*b)*c); associate left"
@doc.r.abc "((a*b)*c)→(a*(b*c)); associate right"
@doc.w.abc "(a*(b*c))→(b*(a*c)); swap first"
@doc.z.abc "(a*(b*(c*d)))→(a*(c*(b*d))); swap second"
@doc.v.abc "a→(a*1); intro unit right"
@doc.c.abc "(a*1)→a; elim unit right"

@l.abc %l
@r.abc %r
@w.abc %w
@z.abc %z
@v.abc %v
@c.abc %c

@eqv.id.%lr [%lr] []
@eqv.id.%rl [%rl] []
@eqv.id.%ww [%ww] []
@eqv.id.%zz [%zz] []
@eqv.id.%vc [%vc] []
@eqv.id.%cv [%cv] []
@eqv.wzw.zwz [%zwz] [%wzw]

@eqv.id.rwlzrwlz [%rwlzrwlz] []
@eqv.id.zrwlzrwl [%zrwlzrwl] []
@eqv.id.lvrrwllcrw [%lvrrwllcrw] []
@eqv.id.lvrrwzlwlc [%lvrrwzlwlc] []
@eqv.id.lvrrzlwlcw [%lvrrzlwlcw] []
@eqv.id.rwlvrrwllc [%rwlvrrwllc] []
@eqv.id.rwvrwrzllc [%rwvrwrzllc] []
@eqv.id.rrwllzrrwllz [%rrwllzrrwllz] []
@eqv.id.rrzllzrrzllz [%rrzllzrrzllz] []
@eqv.id.rzlzrzlzrzlz [%rzlzrzlzrzlz] []
@eqv.id.zrzlzrzlzrzl [%zrzlzrzlzrzl] []

@doc.copy.abc "(a*e)→(a*(a*e)); copy; requires copyable a"
@doc.drop.abc "(a*e)→e; drop; requires droppable a"

@copy.abc %^
@drop.abc %%

@doc.L.abc "((a+(b+c))*e)→(((a+b)+c)*e); associate sum left"
@doc.R.abc "(((a+b)+c)*e)→((a+(b+c))*e); associate sum right"
@doc.W.abc "((a+(b+c))*e)→((b+(a+c))*e); swap sum first"
@doc.Z.abc "((a+(b+(c+d)))*e)→((a+(c+(b+d)))*e); swap sum second"
@doc.V.abc "(a*e)→((a+0)*e); intro void right"
@doc.C.abc "((a+0)*e)→(a*e); elim void right"

@L.abc %L
@R.abc %R
@W.abc %W
@Z.abc %Z
@V.abc %V
@C.abc %C

@eqv.id.LR [%LR] []
@eqv.id.RL [%RL] []
@eqv.id.WW [%WW] []
@eqv.id.ZZ [%ZZ] []
@eqv.id.VC [%VC] []
@eqv.id.CV [%CV] []
@eqv.WZW.ZWZ [%ZWZ] [%WZW]

@doc.ap.abc "([a→a']*(a*e))→(a'*e); apply"
@doc.comp.abc "([x→y]*([y→z]*e))→([x→z]*e); compose blocks/functions"
@doc.quote.abc "(a*e)→([s→(a*s)]*e); quote non-distributed value"
@doc.rel.abc "([x→y]*e)→([x→y]k*e); adds relevance (no drop) attribute to block"
@doc.aff.abc "([x→y]*e)→([x→y]f*e); adds affine (no copy) attribute to block"

@ap.abc %$
@comp.abc %o
@quote.abc %'
@rel.abc %k
@aff.abc %f

@doc.#.abc  "e→(N(0)*e); intro number 0" 
@doc.d0.abc "(N(x)*e)→(N(10x+0)*e); digit"
@doc.d1.abc "(N(x)*e)→(N(10x+1)*e); digit"
@doc.d2.abc "(N(x)*e)→(N(10x+2)*e); digit"
@doc.d3.abc "(N(x)*e)→(N(10x+3)*e); digit"
@doc.d4.abc "(N(x)*e)→(N(10x+4)*e); digit"
@doc.d5.abc "(N(x)*e)→(N(10x+5)*e); digit"
@doc.d6.abc "(N(x)*e)→(N(10x+6)*e); digit"
@doc.d7.abc "(N(x)*e)→(N(10x+7)*e); digit"
@doc.d8.abc "(N(x)*e)→(N(10x+8)*e); digit"
@doc.d9.abc "(N(x)*e)→(N(10x+9)*e); digit"

@#.abc %v 0 %c
@d0.abc 0 digit.abc
@d1.abc 1 digit.abc
@d2.abc 2 digit.abc
@d3.abc 3 digit.abc
@d4.abc 4 digit.abc
@d5.abc 5 digit.abc
@d6.abc 6 digit.abc
@d7.abc 7 digit.abc
@d8.abc 8 digit.abc
@d9.abc 9 digit.abc
@digit.abc %rw 10 %r*+

@doc.add.abc "(N(a)*(N(b)*e))→(N(a+b)*e); add numbers"
@doc.mul.abc "(N(a)*(N(b)*e))→(N(a*b)*e); multiply numbers"
@doc.inv.abc "(N(a)*e)→(N(1/a)*e); multiplicative inverse (requires non-zero)"
@doc.neg.abc "(N(a)*e)→(N(-a)*e); additive inverse"
@doc.divMod.abc 
"(N(divisor)*(N(dividend)*e))→(N(remainder)*(N(quotient)*e)) ;
   such that: quotient * divisor + remainder = dividend
              quotient is integral
              remainder/divisor is a proper fraction (in [0,1)).
~

@add.abc %+
@mul.abc %*
@inv.abc %/
@neg.abc %-
@divMod.abc %Q

@doc.condap.abc 
"([a→a']*((a+b)*e))→((a'+b)*e); conditional application
 
 The block in this case cannot be relevant or linear; i.e. it must be droppable, because the block will be dropped in the 'b' condition.
~
@doc.distrib.abc "(a*((b+c)*e)→(((a*b)+(a*c))*e); distribute"
@doc.factor.abc "(((a*b)+(c*d))*e)→((a+c)*((b+d)*e)); partial factor"
@doc.merge.abc 
"((a+a')*e → (a*e); merge
 
 In this case, a and a' must be "future compatible." This doesn't imply the exact same type, and typecheckers may need to track type a and a' together for some steps before fully merging them.
~
@doc.assert.abc 
"((a+b)*e)→(b*e); assert
 
 Assertions are ideally validated at compile-time, i.e. representing dependent type declarations or contracts. It is preferable that developers be warned when assertions cannot be proven. A runtime assertion failure will halt the AO or ABC program as quickly and cleanly as readily feasible without significantly compromising simplicity or performance. 
 
 It is feasible to run sub-programs in partitions, such that failure only takes out a partition and not the entire program. However, to discourage dependence upon this technique, it is usually a generally a controlled effect provided through the powerblock.
~
@doc.gt.abc 
"(x₁*(x₂*e))→(((x₂*x₁)+(x₁*x₂))*e); compare (greater than)
 
 Not all values are comparable. Just enough is comparable to compare texts: numbers with numbers, sums with sums, products with products and unit with unit. Taking left as false and right as true, comparisons are transitive and irreflexive.
~

@condap.abc %?
@distrib.abc %D
@factor.abc %F
@merge.abc %M
@assert.abc %K
@gt.abc %>

@doc.whitespace.abc
"ABC permits whitespace to simplify formatting. Only SP (32) and LF (10) are permitted. These are understood as operators with type (∀a.a→a). Whitespace may also express paragraphs (see @doc.paragraph.abc).
 
 AO doesn't offer direct access to ABC whitespace, though some parsers may translate AO's whitespace directly into ABC whitespace (doing so simplifies the AO parser). Paragraphs aren't useful in AO, so this whitespace will typically be eliminated.
 
 The main role of whitespace in ABC is to support formatting of ABC code for legibility.
~

@doc.paragraph.abc
"Paragraphs in ABC are an informal concept for stream processing of ABC. The ABC stream is broken (heuristically) into reasonably sized chunks called paragraphs. The stream processor will favor executing a whole number of paragraphs at a time.  Expressing a paragraph is trivial: LF LF (10 10) in the ABC stream. The formal meaning is just identity.
 
 Using paragraphs offers many advantages for performance, maintenance, and predictable partial failure. The environment can often be kept in a 'clean' condition between paragraphs, suitable for rendering, and eliminating some bulky intermediate constructs that would otherwise be kept in memory. Typechecking can often occur at paragraph boundaries, and side-effects can often be delayed such that paragraphs represent atomic failure boundaries.
 
 In practice, if paragraphs are too large there may be issues with buffering. I think most ABC stream readers should be expected to readily support paragraphs of 32 kB, with the failure mode to process fractions of a paragraph. I imagine (without empirical evidence) that most paragraphs will be well under 4 kB.
~

@doc.numbers.abc
"ABC slightly favors legibility over parsimony. One aspect of this regards how numbers are represented, using decimal digits instead of binary. ABC uses eleven basic number operators:
 
     # :: e → N(0) * e  (constructs a new number)
     0 :: N(x) * e → N(10x + 0) * e
     1 :: N(x) * e → N(10x + 1) * e
     2 :: N(x) * e → N(10x + 2) * e
     ...
     9 :: N(x) * e → N(10x + 9) * e
 
 This design enables natural numbers to be expressed legibly, as in `#42` constructing the number 42. Richer numbers must be represented using operations on natural numbers, e.g. 2/3 as `#2#3/*`. Large scientific numbers (e.g. 10^100) can be expensive to express in AO... but should at least compress well.
~

@doc.text.abc
"ABC has a simple block-like format for literal text.
 
     "This is example text.
      It may continue multiple lines.
      Each continuing line must begin with SP (32). 
      Terminate by starting the next line with `~`.
     ~
 
 By design, only LF (10) is to be escaped, and it is escaped by the continuing line. The final LF before `~` is not part of the text. Within an ABC stream, text should usually be formatted to start at a new line (to simplify debugging). ABC doesn't have a distinct 'text type'. Instead, literal text is shorthand for constructing a list of small integers, e.g. of type µT.((N*T)+1). The numbers correspond directly to the unicode codepoints, i.e. between 0 and 1114111 inclusive, though developers are discouraged from encoding non-character codepoints (such as 0xD800 or 0xFFFE). 
 
 Use cases for literal text include labels, embedded DSLs, human meaningful content, and potentially binary values (encoded in base64url, possibly pre-compressed). Binary representations are discouraged except for integration with non-Awelon systems. None of these normal use cases requires unusual codepoints.
~

@doc.block.abc
"A block is simply a finite sequence of ABC. A literal block may be represented in ABC using square brackets like so: `[vrwlc]`. This constructs a first-class function: [vrwlc] :: e → [(a*b)→(b*a)] * e
~

@doc.ambiguous.abc
"(EXPERIMENTAL)
 
 There are plans for AO to express ambiguous behavior using a syntactic (foo|bar) construct. This would indicate that the program is either foo or bar. Ideally, the program would be selected based on type safety (i.e. if 'foo' doesn't make sense in context, exclude it), and the remaining choices would be selected heuristically. Heuristics would be based on attribute annotations and perhaps stability (favoring choices that worked well in the past).
 
 Developers could then refine the choices in many ways: 
 
 * by modifying code to add or remove choices
 * by modifying attribute annotations
 * by modifying the heuristic scoring algorithm
 * by favoring simpler and more precise types
 
 The potential utility of ambiguous code is to express a large space of possible programs, and shift the burden to the compiler to pick a suitable program in context. This can feasibly result in robustly adaptable code. But it comes with risks of high overheads and more challenging failure modes.
~

@doc.invocations.abc
"ABC can call out to the environment by using special curly brace operators of the form `{foo}`. This will invoke the environment with token 'foo' and the tacit value. ABC cannot forge the token, i.e. no primitive ABC operators permit moving from "foo" as text to {foo} as an operator. 
 
 It is recommended that implementations for open systems favor cryptographically secure text - i.e. encrypted or signed text (via HMAC or PKI). Consequently, the text between the curly braces is often called "capability text". When wrapped in a block like [{foo}], these invocations become first-class, transferrable and cryptographically securable capabilities.
 
 AO permits hard-wiring a few classes of invocations. Specifically:
 
 * {&foo} - annotations; to tweak performance or support debugging or typing
 * {:foo} - value sealing; ad-hoc discretionary sealers act as type wrappers
 * {.foo} - unseal a value previously sealed with {:foo}
 
 AO can also indirectly utilize `{#resourceId}` separate compilation and linking, via `compile!foo` directives. Resource identifiers are derived from the secure hash of the bytecode and of its compressed, encrypted distribution form.
 
 ABC may additionally establish other standard capability types, e.g. to support true sealers, uniqueness sources, or homomorphic encryption. But most capabilities are specific - i.e. indicating authority to observe or influence a specific resource on a specific machine.
~

@doc.linking.abc
"ABC's separate compilation and linking model is designed for secure distributed programming and streaming code. An ABC resource is a finite ABC subprogram (much like a block) that can be inlined through ABC's invocation model, i.e. `{#resourceId}`. Such an invocation will typically cause the identified resource to be downloaded, decrypted, decompressed, cached, and compiled.
 
 The resource identifier is constructed as follows:
 
 * secure hash of the bytecode is used as encryption key
 * bytecode is deterministically compressed before encryption
 * secure hash of ciphertext is used as lookup and storage key
 * resourceId is concatenation of two secure hashes
 * resourceId is encoded in ABC's base16 ('a-z' minus 'aeiou' and 'vrwlc')
 
 A resource may include more such resource ids. Through caching and compiling and reusing these resources, Awelon project systems can save a great deal of bandwidth and avoid a lot of rework. Secure hashes effectively enforce that dependencies form a directed acyclic graph. The update and maintenance problems are clearly separate concerns, handled in other program layers. Older resources may eventually be deprecated and fall out of use. 
 
 ABC resources are not restricted to program logic. Arbitrary data or content, including binary data, may be embedded in ABC then distributed as a resource. Non-compressible binaries will see an expansion of less than 2.4%, which is tolerable for most use-cases. There are many advantages to embedding data: transparent procedural generation; support for richer data structures (e.g. streams); easy mashups, reuse, and caching of content; and potential to compile resources directly into an application. 
 
 Resources may be downloaded from anywhere, validated using secure hashes, and cached indefinitely. ABC resources are highly compatible with content delivery networks, peer-to-peer distribution, and cloud storage. A runtime or resource may suggest a few locations to search for resources via annotations. For the most part, we can treat resource ids as a global dictionary.
 
 See also: `prefix.compile!`, `prefix.secret!`, `doc.BinariesInABC`
~

