
@doc.TwoThreeTree
"The 2-3 Tree is a balanced B-tree in which every node has one or two data elements, inner nodes have either two or three children and all children are at the same depth.
 
 A proposed representation:
 
         T  :: (E + (N2 + N3))
         E  :: unit
         N2 :: (T * (a * T)) 
         N3 :: (T * (a * N2)) 
 
         SHORTHAND:  e'T23
 
 The cost of a 2-3 tree is dealing with three types at every step, which results in relatively bulky logic with a lot of conditionals. This should work well enough even if it's a bit heavy, and 2-3 trees are ultimately the basis for the 2-3 finger trees for sequences. But it might be worth exploring red-black trees and other models to see if any of them prove a bit more lightweight.
~
@doc.suffix.t23 doc.TwoThreeTree

@seal.t23   %r [{:t23}] %r$l
@unseal.t23 %r [{.t23}] %r$l
@seald.t23   .rw seal.t23 .wl
@unseald.t23 .rw unseal.t23 .wl

@doc.empty.t23 "-- e'T23"
@empty.t23 intro1 fromLeaf.t23

@doc.singleton.t23 "e -- e'T23"
@singleton.t23 empty.t23 dup dpw p fromN2.t23

@fromLeaf.t23 r.fromLeaf.t23 seal.t23
@fromN2.t23 r.fromN2.t23 seal.t23
@fromN3.t23 r.fromN3.t23 seal.t23
@r.fromLeaf.t23 inL
@r.fromN2.t23 inRL
@r.fromN3.t23 inRR
@fromN2d.t23 .rw fromN2.t23 .wl

@doc.insertKV.t23 
"Insert or replace a value in a binary search tree. Returns an updated tree and the replaced element.
 
         (k*v)'T23 (k*v) [(k*k)→Ord] -- (k*v)'T23 ((k*v)+1)
 
 Inserting may grow the tree. See `doc.tree.insertKV.t23` for details.
~
@insertKV.t23 
 bindK.insertKV.t23 take2nd
 [tree.insertKV.t23] bind fixpoint inline 
 repairRoot.insertKV.t23 put
@repairRoot.insertKV.t23 [] [fromN2.t23] if

@doc.bindK.insertKV.t23 "(k*v) [(k*k)→Ord] -- (k*v) [k→Ord]"
@bindK.insertKV.t23 .rw dupfst .wl .bind

@doc.tree.insertKV.t23 
"Documenting implementation details here... because this is relatively complex compared to most data structures.
 
        tree.insert  ::  (k*v)'T23 [tree.insert] [k→Ord] (hand: (k*v)) 
                     -- ((k*v)'T23 + Grow)  (hand: ((k*v)+1))
 
 Here we're returning either a tree OR a 'grow' proposition (along with the replaced element in the hand). The type of grow is the same as N2, indicating a new proposed tree of height one greater than the original tree. I.e. if we insert to a leaf, we always get the grow proposition. An N2 node will always absorb a 'grow' proposition by changing to an N3 node. If we attempt to grow an N3 node, the result is a new grow proposition. We can trivially grow the root, resulting in a new two-three tree.
~

@tree.insertKV.t23 swap take2 unseal.t23 [leaf.insertKV.t23] [node.insertKV.t23] if
@leaf.insertKV.t23 discard2 put empty.t23 dup dpw p inR swap inR take
@node.insertKV.t23 [n2.insertKV.t23] [n3.insertKV.t23] if

@n2.insertKV.t23 caadr put .apply [drop eq.n2.insertKV.t23] [neq.n2.insertKV.t23] if inL
@eq.n2.insertKV.t23 discard put wcadr inL take fromN2.t23
@neq.n2.insertKV.t23 [lt.n2.insertKV.t23] [gt.n2.insertKV.t23] if_
@lt.n2.insertKV.t23 x hap [p fromN2.t23] [grow.lt.n2.insertKV.t23 fromN3.t23] if
@gt.n2.insertKV.t23 wx wx hap [pw pw fromN2.t23] [grow.gt.n2.insertKV.t23 fromN3.t23] if

@doc.grow.lt.n2.insertKV.t23 "(kv2*T3) (T1*(kv1*T2)) -- N3"
@doc.grow.gt.n2.insertKV.t23 "T1 kv1 (T2*(kv2*T3)) -- N3"
@grow.lt.n2.insertKV.t23 l x dp p r
@grow.gt.n2.insertKV.t23 pw pw

@n3.insertKV.t23 caadr paste .apply [drop eqk1.n3.insertKV.t23] [neqk1.n3.insertKV.t23] if
@eqk1.n3.insertKV.t23 discard2 put wcadr inL take fromN3.t23 inL
@neqk1.n3.insertKV.t23 [ltk1.n3.insertKV.t23] [gtk1.n3.insertKV.t23] if_
@ltk1.n3.insertKV.t23 x discard hap [p fromN3.t23 inL] [grow.ltk1.n3.insertKV.t23 inR] if 

@gtk1.n3.insertKV.t23 wx wx caadr put .apply [drop eqk2.n3.insertKV.t23] [neqk2.n3.insertKV.t23] if
@eqk2.n3.insertKV.t23 discard put wcadr inL take pw pw fromN3.t23 inL
@neqk2.n3.insertKV.t23 [ltk2.n3.insertKV.t23] [gtk2.n3.insertKV.t23] if_
@ltk2.n3.insertKV.t23 x hap [p pw pw fromN3.t23 inL] [grow.ltk2.n3.insertKV.t23 inR] if
@gtk2.n3.insertKV.t23 wx wx hap [pw pw pw pw fromN3.t23 inL] [grow.gtk2.n3.insertKV.t23 inR] if

@doc.grow.ltk1.n3.insertKV.t23 "(kv1*(t2*(kv2*t3))) (t0*(kv0*t1)) -- N2; split left"
@doc.grow.ltk2.n3.insertKV.t23 "t0 kv0 (kv2*t3) (t1*(kv1*t2)) -- N2; split middle"
@doc.grow.gtk2.n3.insertKV.t23 "t0 kv0 t1 kv1 (t2*(kv2*t3)) -- N2; split right"
@grow.ltk1.n3.insertKV.t23 fromN2.t23 swap wx fromN2.t23 pw pw
@grow.ltk2.n3.insertKV.t23 l x dp swap fromN2.t23 dwx pw dpw dpw fromN2d.t23 pw
@grow.gtk2.n3.insertKV.t23 fromN2.t23 pw dpw dpw fromN2d.t23 pw


@testing.t23 pangram#1 textToTestTree.t23
@textToTestTree.t23 dup reverse.l zip.l empty.t23 swap [mkCompareNums insertKV.t23 drop] each.l


@doc.swapL.t23 "e'T23 e -- e'T23 (e+e); swap element with successor; returns in left on failure"
@swapL.t23 take [tree.swapL.t23] take hfix hap
@tree.swapL.t23 unseal.t23 [inL discard put inL] [node.swapL.t23 inRd] if seald.t23
@node.swapL.t23 [n2.swapL.t23 inLd] [n3.swapL.t23 inRd] if
@n2.swapL.t23 n*.swapL.t23
@n3.swapL.t23 n*.swapL.t23
@n*.swapL.t23 x hap dp [wcadr] [] if inR

@doc.Deletion.t23
"Deletion in 2-3 trees always starts with a leaf. If the node to be deleted isn't a leaf, we can always swap the node with its in-order successor, which will always be a leaf. Though, this is ultimately yet another factor that increases the size of the deletopm logic.
 
 After we delete a node, the result is either a proper tree or a "hole", a tree with no keys and just one child tree. The job is then reduced to repairing this hole. There are a few different 'repair' cases:
 
 1) Borrow from a sibling with 3 children.
 
                9                 7
              /   \     ...     /   \    
            4 7    _           4     9
           a b c   d          a b   c d
 
 2) Borrow from parent with 3 children.
 
                 4   9                  6
               /   |   \     ...      /   \
              2    6    _           2 4    9
             a b  c d   e          a b c  d e
 
 3) Single sibling with two children: propagate hole upwards.
 
               9                 _
             /   \      ...      |
            4     _             4 9
           a b    c            a b c
 
 4) If the hole reaches the root, delete the hole.
 
 If we count specific cases for each location, this adds up to about fifteen cases. I'd really prefer not to implement fifteen cases in AO, so I'll be seeking a lighter weight self-balancing tree. Hopefully, red-black trees are lighter weight.
~


@doc.removeK.t23
"Remove a value from a 2-3 search tree tree, by key.
 
        (k*v)'T23 k [(k*k)→Ord] -- (k*v)'T23 ((k*v)+1)
 
 Deletion in 2-3 trees is rather complicated. See `doc.Deletion.t23`.
~
@removeK.t23 root.removeK.t23 take merge put

@doc.root.removeK.t23
"The inner function `root.removeK.t23` will preserve information about the hole.
 
        (k*v)'T23 k [(k*k)→Ord] -- ((k*v)'T23 + (k*v)'T23)) ((k*v)+1)
 
 The final removal of the root hole is left to `removeK.t23`.
~

@root.removeK.t23 .bind [tree.removeK.t23] bind fixpoint inline put
@tree.removeK.t23 swap take2 unseal.t23 [leaf.removeK.t23] [node.removeK.t23] if seal.t23
@leaf.removeK.t23 fromLeaf.t23 inL intro1 inR discard2
@node.removeK.t23 [n2.removeK.t23] [n3.removeK.t23] if
@n2.removeK.t23 "TODO!t23"
@n3.removeK.t23 "TODO!t23"



@doc.fmap.t23 "a'T23 [a→b] -- b'T23; apply function to every element"
@fmap.t23 [t.fmap.t23] bind fixpoint inline
@t.fmap.t23 [inL] [nn.fmap.t23 inR] if
@nn.fmap.t23 [n2.fmap.t23 inL] [n3.fmap.t23 inR] if
@n2.fmap.t23 "TODO!t23"
@n3.fmap.t23 "TODO!t23"

@doc.height.t23 "a'T23 -- a'T23 Nat; find height of balanced 2-3 tree"
@doc.size.t23 "a'T23 -- a'T23 Nat; find size (number of elements) of 2-3 tree"
@doc.assertBalanced.t23 "a'T23 -- a'T23; assert 2-3 tree is balanced"
@doc.assertSorted.t23 "(k*v)'T23 [(k*k)→Ord] -- (k*v)'T23; assert 2-3 tree is sorted"
@doc.validateTree.t23 "(k*v)'T23 [(k*k)→Ord] -- (k*v)'T23; assert balanced and sorted"


