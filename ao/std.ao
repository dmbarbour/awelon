abc abc abc
@doc.import.std "an okay starting point for AO dictionaries"

@doc.StandardEnvironment
"The required environment for AO is a pair: (s*e). Literals, such as
 blocks, numbers, and text, are of type `(s*e) → ((L*s)*e)`. The idea
 is that 's' represents the current stack, while 'e' is kept stable
 and represents the remainder of the environment.
 
 The standard environment elaborates 'e' with a structure designed for
 flexible workflows and dataflows, concurrency, and extensibility. The
 type is roughly:
 
     (s * (h * (p * ((sn * lns) * ex))))
 
 Where:
   s: the current stack, where most operations apply
   h: the hand, a temporary store and semantic clipboard
   p: a powerblock, to observe or influence real world
   sn: name of current stack, used when switching stacks
   lns: list of (name*stack) pairs for workspaces and registers
   ex: unused, available for experimental extensions
 
 Thus AO's standard environment supports stack programming, but the
 extra stacks and powerblocks are very convenient and expressive.
 
 Many basic stack manipulators are borrowed from Factor and FORTH.
 Also, operations on the stack are often documented using notation
 for stack effects developed in FORTH, e.g. `dup` is `x -- x x`,
 but this corresponds to a full type `((x*s)*e)→((x*(x*s))*e)`.
~

@doc.id " -- "
@doc.dup "(Copyable x) ⇒ x -- x x"
@doc.dupd "(Copyable x) ⇒ x y -- x x y"
@doc.over "(Copyable x) ⇒ x y -- x y x"
@doc.tuck "(Copyable y) ⇒ x y -- y x y"
@doc.pick "(Copyable x) ⇒ x y z -- x y z x"
@doc.drop "(Droppable x) ⇒ x -- "
@doc.nip  "(Droppable x) ⇒ x y -- y"
@doc.nip2 "(Droppable x,y) ⇒ x y z -- z"
@doc.swap "y x -- x y"
@doc.swapd "x y z -- y x z"
@doc.rot "x y z -- y z x"
@doc.unrot "y z x -- x y z"
@doc.roll "w x y z -- x y z w"
@doc.unroll "x y z w -- w x y z"
@doc.spin "x y z -- z y x"
@doc.assocl "y x -- (x*y)"
@doc.assocr "(x*y) -- y x"
@doc.intro1 " -- Unit"
@doc.elim1 "Unit -- "
@doc.pswap "(x*y) -- (y*x)"

@id 
@dup %r^zlwl
@dupd swap dup rot
@over dupd swap
@tuck swap over
@pick %rw over %wl swap
@drop %r%
@nip swap drop
@nip2 unrot drop2
@swap  %rwr      %wzw      %lwl
@swapd %rwr %wzr %wzw %lzw %lwl
@rot swapd swap
@unrot swap swapd
@spin swap swapd swap
@roll %rw roll3 %wl swap
@unroll swap %rw unrot %wl
@assocl %rwrzwll
@assocr %rrwzlwl
@intro1 %vvrwlcl
@elim1 %rvrwlcc
@pswap %rrwll

@doc.roll{N} "synonyms for swap, rot, roll"
@roll2 swap
@roll3 rot
@roll4 roll

@doc.Quotable
"Most values in AO are quotable, except in contexts where an AO 
 program models a distributed behavior. Distributed values are not
 quotable; all values entering a quote must have the same location.
 
 A quotation is simply a block that reproduces a value. Quotations
 can be utilized together with composition for partial application.
 
 If a block with affine or relevant properties is quoted, the quote
 will inherit these properties. 
~
@doc.quote "(Quotable x) ⇒ x -- [1→x]"
@doc.unquote "[1→x] -- x"
@quote %r'l
@unquote %rvvrwlcw$l

@relevant %rkl
@affine   %rfl
@linear   relevant affine
@doc.relevant "mark block on stack as relevant (not Droppable)"
@doc.affine "mark block on stack as affine (not Copyable)"
@doc.linear "mark block on stack as linear (neither Copyable nor Droppable)"

@reifyStack intro1 %rwl
@restoreStack %rwl elim1
@doc.reifyStack "(s*e)→((s*Unit)*e) : stack becomes object on fresh stack"
@doc.restoreStack "((s*Unit)*e)→(s*e) : single object on stack becomes stack"

@doc.drop2 "(Droppable x,y) ⇒ x y -- "
@doc.drop3 "(Droppable x,y,z) ⇒ x y z -- "
@doc.drop4 "(Droppable w,x,y,z) ⇒ w x y z -- "
@drop2 drop drop
@drop3 drop drop drop
@drop4 drop drop drop drop

@doc.dup2 "(Copyable x,y) ⇒ x y -- x y x y"
@doc.dup3 "(Copyable x,y,z) ⇒ x y z -- x y z x y z"
@doc.dup4 "(Copyable w,x,y,z) ⇒ w x y z -- w x y z w x y z"
@dup2 assocl dup %rw 
      assocr %wl
      assocr
@dup3 assocl assocl dup %rw 
      assocr assocr %wl 
      assocr assocr
@dup4 assocl assocl assocl dup %rw 
      assocr assocr assocr %wl 
      assocr assocr assocr

@doc.Hands
"In AO, the hand is modeled as a second stack. It can be used as a
 temporary storage for deep operations on the current stack, and 
 also serves as a semantic clipboard for ad-hoc data shuffling.
 
     (currentStack * (hand * ... ))
 
 Developers can:
 
   * take top item from stack into hand
   * put top item from hand onto stack
   * juggle (rotate) a few items
   * discard a value from the hand
   * copy an item from the stack into hand
   * paste an item in the hand onto the stack
 
 In addition, hands are stable when developers use navigational
 metaphors, i.e. to operate in different workspaces. 
~

@take %rzlw
@put  %wrzl
@discard put drop
@copy dup take
@paste put copy

@take2 take take
@take3 take take take
@take4 take take take take
@put2  put  put
@put3  put  put  put
@put4  put  put  put  put
@juggle2 %w roll2 %w
@juggle3 %w roll3 %w
@juggle4 %w roll4 %w

@doc.take "move value at top of stack to top of hand"
@doc.put "move value at top of hand to top of stack"
@doc.discard "drop and destroy value in hand"
@doc.copy "copy object from top of stack into hand (copy/paste metaphor)"
@doc.paste "paste object from hand onto top of stack (copy/paste metaphor)"

@reifyHand %w reifyStack %w
@restoreHand %w restoreStack %w
@doc.reifyHand "hand becomes single object in fresh hand"
@doc.restoreHand "single object in hand becomes hand"

@doc.EnvironmentManipulation
"AO developers aren't limited to a single instance of the standard
 environment. Subprograms may be computed in their own complete 
 environments, and objects may be shifted from one environment to
 another (using the hand, by default, for data shuffling). 
 
 Developers can:
 
   * create a fresh, empty environment on the stack
   * safely destroy an empty environment on the stack
   * swap environment on the stack with the current 
   * apply a function in a fresh environment
 
 When swapping to a new environment, the current hand and powerblock
 come with the user (at least by the standard functions). It isn't
 difficult to abstract motion that also switches hands and tools.
 
 Environments can simplify reasoning about subprogram interactions. 
~

%wrapE = intro1 swap intro1 swap intro1 intro1 intro1 assocl swap
%unwrapE = swap assocr elim1 elim1 elim1 swap elim1 swap elim1
%wrapS = assocr intro1 rot3 pzip assocl rot2 assocl
%unwrapS = swap rot3 assocr rot2 elim1 rot3 rot3 swap


@doc.TODO
"Much to do about AO
  * functions on lists, association lists, records
  * optimizers and compilers for ABC, AMBC, and AO
  * simplified app type for quick integration with Haskell? (use plugins?)
  * 2D-3D scene-graphs based on enneatrees and zippers
  * secure pseduo-random number generators; probabilistic programs
  * math libs - linear algebra, symbolic maths
  * knowledge databases as words (or sets thereof) in dictionary
  *   unicode
  *   countries, flags, populations, maps
  *   project Gutenberg novels
 
 AO's design philosophy is actually similar to Wolfram's - that code
 should have easy access to vast quantities of useful, maintainable
 data. AO provides this access in the form of words in a very large
 dictionary.
~

@JUNK

% Environment Manipulations
%
%  (todo) fix for new environment model... need to choose name for
%  initial stack? Maybe "main"?
%
%  wrapE - wrap a value in a fresh environment; wrapped value becomes
%    the only element in a fresh env's current stack. If `wrapE` is 
%    called without a specific target, it captures the current 
%    environment.
%  wrapS - capture current stack as a value, which is afterwards the
%    only value on the current stack. 
%  unwrapE/unwrapS - reverse these manipulations.
%
% The normal block applicators will wrap a new environment around the
% arguments before applying the block. This allows subprograms to use
% the multi-stack and hands concept, but prevents accidental coupling
% with the current environment. 
%
%wrapE = intro1 swap intro1 swap intro1 intro1 intro1 assocl swap
%unwrapE = swap assocr elim1 elim1 elim1 swap elim1 swap elim1
%wrapS = assocr intro1 rot3 pzip assocl rot2 assocl
%unwrapS = swap rot3 assocr rot2 elim1 rot3 rot3 swap


% Combinators: remove a block from top of the current stack, and 
%   apply it to all or part of the environment.
%
%   apply: target whole environment (as if block is coded inline)
%   appX: target top item on stack (without fresh environment)
% 
% Note that these do not wrap the input in a fresh environment, so
% only `appE` is directly usable.
%
apply = assocr intro1 swap assocr first swap elim1
appX = assocr rot2 assocr rot3 first assocl

@doc.Zippers
"The zipper data structure was described by Gérard Huet in 1997. It
 enables navigation and modification of tree-structured data in a
 purely functional context. At any time, the original tree structure
 can be recovered with the modifications. For Awelon project, zippers 
 are widely useful for modeling navigation through scene graphs or 
 documents, and document-like structures. They may also be used for
 raycasting and rendering.
 
 To support user intuitions, zippers should be specialized for common
 data structures. However, AO does provide a few standard primitives
 for zippers on AO's product data type.
~

@doc.HigherOrderZippers
"Zippers are a first derivative on a data structure. However, higher
 derivatives are also very useful. For example, first derivative can
 focus on a single character in text, but second derivative models
 an expandable selection of text. In a scene graph, such could model
 a mobile bounding volume. 
 
 I don't grasp third derivatives yet, but my intuition is that it 
 can help structurally abstract sweeps or convolutions, e.g. the
 process of casting a ray through a scene-graph.
~ 



@doc.prefix.ioapp
"'ioapp' is a prefix for a very trivial application model.
 
 The expected application type is `Power → Power` where Power
 is a linear powerblock of literal form `[{io}]`. All effects are
 modeled as messages to this block, trivally:
 
     µ Power . [(label * msg) → (Power * result)]
 
 This design essentially represents a single-threaded procedural
 application where actions are messages to the thread. However, it
 is feasible that an ioapp can be layered into other models.
 
 ioapp type is used for bootstrapping of AO.
~ 

@JUNK

% 
% A zipper (data structure) is a pure way to  navigate and manipulate
% tree-structured or list-structured data. The zipped structure has
% enough information to restore its structure, keeping any changes.
%
% In Awelon, zipper operations apply to top object on current stack. 
%
%    zwrap - prepare zipper; stack object is initial target
%    zf - if target was (x*y), x is now target; undo with zuf
%    zs - if target was (x*y), y is now target; undo with zus
%    zu - undoes last zipper navigation (selects zuf or zus)
%    zunwrap - fully exit and unwrap zipper, even if deep
%    zunwrap_ - just unwrap zipper
%
% Knowing the representation of the zipper structure isn't essential,
% but it might be interesting to some people. 
%
%    zwrap :: x <~> x*(1*1) :: zunwrap_ (on stack)
%    zf    :: (x*y)*(l*r) <~> x*(1*(y*(l*r))) :: zuf
%    zs    :: (x*y)*(l*r) <~> y*((x*l)*r)     :: zus
%
% The 'zu' and 'zunwrap' operations must perform introspection. 
%
% To manipulate the zipper target, developers will usually use an
% operation such as:
%   
%    zswap - switch target of zipper (2nd) with object on stack (1st)
%    zpop  - move target to top of stack (unit placeholder)
%    zpush - undo zpop
%
zwrap = intro1 intro1 assocl rot2 pzip assocl  
zunwrap_ = assocr pzip rot2 assocr elim1 elim1  
zf = assocr xf intro1 assocl roll2 assocl 
zuf = assocr roll2 assocr elim1 cf assocl
zs = assocr xf roll3 cs roll2 assocl
zus = assocr roll2 xf roll3 cs assocl
zswap = cf assocr roll2 assocl xf
zpop = intro1S zswap
zpush = zswap elim1S
% TODO: zu, zu*
zu = % look at wrapper to decide step back
zu* = % iterative zu
zunwrap = zu* zunwrap_

% Thoughts: zipper for the sum type? maybe should have a 
% different name for it?

@assertUnit elim1 intro1
@assertNonLinear dup drop
@assertNonLinearStack retainStack drop
@doc.assertUnit "asserts value on stack is the unit value"
@doc.assertNonLinear "asserts value on stack is copyable and droppable"
@doc.assertNonLinearStack "asserts current stack is copyable and droppable"

@doc.NamingConventions
"The naming convention in this AO dictionary is: (type).(context).
 
 Here 'type' is just a weak identifier to help suggest how the word
 should be interpreted. If there is no standard type, then it may
 be omitted. 'doc', 'test', and 'app' are example types. Context may 
 identify a projects, users, frameworks, or DSLs. 
 
 Extended naming conventions may exist, e.g. for using AO dictionary
 as a spreadsheet, or having multiple levels of depth. However, AO
 encourages a relatively 'flat' namespace, minimizing hierarchy. 
 
 A good programming environment should help make long names readable
 by coloring words by context, styling them by type, hiding common 
 prefixes and suffixes, and enabling easy navigation and discovery.
~

