
@doc.Boolean 
"A boolean, in AO, is simply a sum of unit values: 1 + 1. By AO's conventions, a value in the left indicates 'false' or 'needs work', while a value in the right indicates 'true' or 'done'. It is this sense of true meaning done that many collection types (lists, streams, maybe, etc.) tend to use the right value for empty.
 
 Sums typically exist either by construction (e.g. representing different data constructors) or as a result of testing whether one number is greater than another. Booleans are more often the result of observation, since they're very lossy (aptly described as 'boolean blindness'). Words for manipulating booleans will use suffix `.b`.
~

@doc.suffix.b doc.Boolean

@true.b intro1 inR
@false.b intro1 inL

@true true.b
@false false.b

@doc.toBoolean "(a+b) -- Bool; (droppable a, droppable b)"
@toBoolean %r toBoolean\1e %l
@toBoolean\1 %v toBoolean\1e %c
@doc.toBoolean\1e "(a+b)*e â†’ (1+1)*e; droppable a, droppable b"
@toBoolean\1e %vvrwlcD trimBoolean\1e

@doc.trimBoolean "(x*1 + y*1) -- (x+y); may be useful after distrib"
@trimBoolean %r trimBoolean\1e %l
@trimBoolean\1e %Fw%

@doc.assertBoolean "Bool -- Bool; enforces true boolean (1+1)"
@assertBoolean %rVR [.assertUnit] %r?W [.assertUnit] %r?WLCl

@doc.and.b "Bool Bool -- Bool; are both arguments true?"
@doc.or.b "Bool Bool -- Bool; is at least one argument true?"
@doc.xor.b "Bool Bool -- Bool; are the arguments distinct?"
@doc.nand.b "Bool Bool -- Bool; is at least one argument false?"
@doc.not.b "Bool -- Bool; invert boolean"

@not.b %rVRWLCl
@nand.b and.b not.b
@and.b distrib %rVRW [%c] %r?WLCL [%v%] %r?l
@or.b  distrib %r [%c] %r?RVRW [%v%] %r?WLCl
@xor.b 
 distrib 
 %r [%c] %r? %VRW [%c] %r? %LCRWZL
 %VR [%vMc] %r?W [%vMc] %r?WLCl

@test.and.b
 false.b false.b and.b false.b assertEQ1
 false.b true.b  and.b false.b assertEQ1
 true.b  true.b  and.b true.b  assertEQ1
 true.b  false.b and.b false.b assertEQ1

@test.not.b
 false.b not.b true.b  assertEQ1 
 true.b  not.b false.b assertEQ1

@test.or.b
 false.b false.b or.b false.b assertEQ1
 false.b true.b  or.b true.b  assertEQ1
 true.b  true.b  or.b true.b  assertEQ1
 true.b  false.b or.b true.b  assertEQ1

@test.xor.b
 false.b false.b xor.b false.b assertEQ1
 false.b true.b  xor.b true.b  assertEQ1
 true.b  true.b  xor.b false.b assertEQ1
 true.b  false.b xor.b true.b  assertEQ1

@eqv.id.not.b [not.b not.b] []
@eqv.id.assertBoolean [assertBoolean] []
@eqv.idempotent.toBoolean [toBoolean] [toBoolean toBoolean]
@eqv.commutative.and.b [and.b] [swap and.b]
@eqv.commutative.or.b  [or.b]  [swap or.b]
@eqv.commutative.xor.b [xor.b] [swap xor.b]
@eqv.deMorgans.1 [and.b not.b] [not.b swap not.b swap or.b]
@eqv.deMorgans.2 [or.b not.b] [not.b swap not.b swap and.b]

