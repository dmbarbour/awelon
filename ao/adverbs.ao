@doc.applyWithAdverbs
"AO includes a highly experimental syntactic sugar for conjugation, or inflection of a verb with a modifying word (an adverb). 
 
 The AO parser takes a word of form `foo\*kd` and rewrites it to `[foo] [\*kd] applyWithAdverbs`. The code `\*kd` is further rewritten to sequence of adverbs `\* \k \d`, similar to expansion of inline ABC. Each adverb is limited to a single distinguishing character. 
 
 The meaning of each word and adverb in the expanded form must be defined in the developer's dictionary. This includes `applyWithAdverbs`. Developers can explore different models for adverbs by different definitions of this word.
 
 At the moment, adverbs are not very usable, beyond trivial cases. Direct operations on a word seem unable to capture some broad classes of useful patterns. A more indirect model might offer more flexibility, and could be implemented via `applyWithAdverbs`. 
 
 CAUTION: The adverb feature will be removed if adverbs do not prove widely useful. For now, they should not be used in the main dictionaries.
~
@applyWithAdverbs apply inline
@doc.adverb.* "\* will map a function of type [x--y] across a list"
@doc.adverb.f "\f will fold a function of type [x--] across a list; the entire environment (minus the list argument) becomes the fold state"
@doc.adverb.d "\d will hide first item on stack before applying"
@doc.adverb.k "\k should operate on a copy of the first item on the stack."

@\* [map] bind
@\f [each] bind
@\d [dip] bind
@\k [dupd dip] bind
