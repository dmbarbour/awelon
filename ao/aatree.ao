@doc.AATree
"The AA tree is a refinement on red-black binary search tree developed by and named for Arne Anderson. The idea is simple: allow red children only on the right hand side. The resulting tree corresponds to a 2-3 B-tree. Compared to red-black trees, a few extra balancing operations are required... but they are simpler. Compared to 2-3 trees, there are fewer node types.
 
 * the root is black
 * all leaves are black
 * all left-hand children are black
 * every red child has two black children
 
 Shorthand Type: elem`AATree
 
 We have several options for representing AA trees in Awelon project. For example, we could specialize red nodes based on them having only black children. We could potentially take advantage of all nodes on a level having the same number of children. But, keeping the KISS principle in mind like a mantra, I'll be using a uniform representation in this case:
 
         Root:  Tree
         Tree:  Node + Unit
         RTree: Node + Tree
         Node:  Elem * (Tree * RTree)
 
 In a properly balanced tree, we will be able to assert that a red node's right child is always black, or that the black-height from root to every leaf is equivalent.
 
 Thoughts on balancing the AA tree without height information: after insert or delete, the balance will *at most* be off by one. Potentially, we can take advantage of this by tracking balance on the return from insert or delete.
 
 NOTE: The AA tree is not fully implemented at the moment. I'm having some difficulty with implementing it without keeping the full 'level' metadata used in Arne Anderson's paper, and I'd rather not be manipulating or comparing numbers for the tree structure itself. For now, please consider this data structure to be in a half-implemented limbo; I'll instead try two-three trees (under suffix `.t23`) or red-black trees (under suffix `.rbt`). 
~
@doc.suffix.AATree doc.AATree

@doc.empty.AATree "-- elem`AATree"
@empty.AATree intro1 inR

@doc.singleton.AATree "elem -- elem`AATree"
@singleton.AATree empty.AATree empty.AATree inR pw pw inL

@doc.fmap.AATree 
"Apply a function to all data elements in tree. 
 
         a`AATree [a→b] -- b`AATree
 
 Note: if this affects the key values, it is the developer's responsibility to
 preserve a sorted ordering.
~
@fmap.AATree [r.fmap.AATree] apply2to1
@r.fmap.AATree [n.fmap.AATree] bind fixpoint t.fmap.AATree
@t.fmap.AATree take [put inline inL] [discard inR] if
@rt.fmap.AATree take [put inline inL] [put t.fmap.AATree inR] if
@n.fmap.AATree
 take2 wx x
 paste t.fmap.AATree
 swap put rt.fmap.AATree
 pw swap put .apply p

@doc.blackHeight.AATree 
"Compute height of tree in black nodes (assuming correct balance).
 
         a`AATree -- a`AATree Nat
 
 This takes O(height) = O(lg N) time, and serves as a rough estimate of size.
~
@blackHeight.AATree [t.blackHeight.AATree] fixpoint apply1to2
@t.blackHeight.AATree take [n.blackHeight.AATree inLd inc] [discard inR 0] if
@n.blackHeight.AATree wx x put inline dp dpw

@doc.size.AATree "a`aaTree -- a`AATree Nat; O(N); count of elements"
@size.AATree [r.size.AATree] apply1to2
@r.size.AATree [n.size.AATree] fixpoint t.size.AATree
@t.size.AATree take [put inline inLd] [discard inR 0] if
@rt.size.AATree take [put inline inLd] [put t.size.AATree inRd] if
@n.size.AATree 
 take wx wx
 paste rt.size.AATree
 rot put t.size.AATree
 swapd .add inc take
 p pw put 

@doc.assertBalanced.AATree 
"Assert than an AA tree is properly balanced, meaning that the number of black nodes is equal between root and every leaf.
 
         a`AATree -- a`AATree
 
 This will assert that the height of each subtree is balanced until we reach root.
~
@assertBalanced.AATree [r.assertBalanced.AATree] apply1to1
@r.assertBalanced.AATree [n.assertBalanced.AATree] fixpoint t.assertBalanced.AATree drop
@t.assertBalanced.AATree take [put inline inLd inc] [discard inR 0] if
@rt.assertBalanced.AATree take [put inline inLd] [put t.assertBalanced.AATree inRd] if
@n.assertBalanced.AATree
 take wx wx 
 paste rt.assertBalanced.AATree
 rot put t.assertBalanced.AATree
 swapd assertEQ1.n take
 p pw put

@doc.toStream.AATree "e`AATree -- e`Stream; stream data elements left to right"
@doc.toStreamR.AATree "e`AATree -- e`Stream; stream data elements right to left"
@doc.toList.AATree "elem`AATree -- elem`List; access ordered list of elements"
@doc.toListR.AATree "elem`AATree -- elem`List; access reverse-ordered list of elements"
@toList.AATree toStreamR.AATree toListR.s
@toListR.AATree toStream.AATree toListR.s

@doc.rt2t.AATree "(Node + Tree) -- Tree"
@rt2t.AATree %r i.rt2t.AATree %l
@i.rt2t.AATree %VVRRZLLCM

@toStream.AATree [t.toStream.AATree] .fixfirst .bind
@t.toStream.AATree %D [n.toStream.AATree .app1] %r?VRW [%% .inR] %r?WLCMc
@n.toStream.AATree 
  preApply
   x take wx wx rt2t.AATree 
   paste .bind unrot put .bind unrot
   cons.s addend.s 
  postApply

@toStreamR.AATree [t.toStreamR.AATree] .fixfirst .bind
@t.toStreamR.AATree %D [n.toStreamR.AATree .app1] %r?VRW [%% .inR] %r?WLCMc
@n.toStreamR.AATree
  preApply 
   x take wx wx rt2t.AATree
   paste .bind unrot put .bind unrot
   swapd cons.s addend.s 
  postApply

@doc.bindKVCmp.AATree "(k*v) [(k*k)→Ord] -- (k*v) [k→Ord]"
@bindKVCmp.AATree dx dupd .bind dp
@eqv.bindKVCmp.AATree#1 [bindKVCmp.AATree] [.rw x dup dp .wl .bind]

@doc.Zipper.AATree
"A simple zipper data structure - a `(focus*context)` pair, where the focus is a tree node and the context is a list representing a path back to root. Each element in the context includes enough directional information to restore the original tree. Possible representation for context nodes:
 
                           right on
                  left     red or black
          Elem * (RTree + (Tree + Tree))
 
 Where we're holding onto the tree whose path we did not take. Alternatively, the Elem type could be pre-distributed through the sum types. I'm not sure it makes a real difference one way or the other.
~
@doc.zwrap.AATree "elem`AATree -- (elem`AATree * AATreeCx); create a zipper"
@zwrap.AATree empty.l pw

@doc.zesc.AATree "(elem`AATree * AATreeCx) -- elem`AATree; exit a zipper (assumes balanced)"





@doc.insertKV.AATree
"Insert or replace a `(key*value)` data element in an AA tree.
 
        (k*v)`AATree (k*v) [(k*k)→Ord] -- (k*v)`AATree ((k*v)+1)
 
 The key type, in this case, must be copyable, but the value type may be linear. The ordinal comparison function should be consistent with the ordering already used in the tree, i.e. all inserts should use the same totally ordered comparison function. If the element already exists, it will be replaced and the old `(k*v)` pair will be returned. We'll allow that the keys might not be identical; they only need to be equivalent as far as the ordinal comparison function is concerned.
 
 The current representation of AATree does not keep extra data regarding 'level', so this creates a few challenges for the balancing operation. Relevantly, there are multiple cases to handle. If we end up replacing a node, the balance is not affected. If we insert a node, the balance may be impacted, or might not be. It isn't clear to me, at the moment, how to best model this. 
~ 

@insertKV.AATree [apEnv.insertKV.AATree] apply3to2
@apEnv.insertKV.AATree 
 bindKVCmp.AATree [node.insertKV.AATree] bind
 taked take hfix tree.insertKV.AATree
@tree.insertKV.AATree [hap] [leaf.insertKV.AATree] if
@leaf.insertKV.AATree discard put singleton.AATree swap inR
@doc.node.insertKV.AATree "((k*v)*(t*rt)) [k→Ord] \h [node.insert] (k*v) -- node' ((k*v)+1)"
@node.insertKV.AATree 
 dx dx dup .apply dp dp
 
 {&TODO: insert node then rebalance.}




@doc.removeKV.AATree
"Remove an element by key from a `(key*value)` AA tree. 
 
         (k*v)`AATree k [(k*k)→Ord] -- (k*v)`AATree ((k*v)+1)
 
 The removed element will be returned to the user, if it exists. This can be used for linear manipulations of the map. Though, it may be more efficient to use a zipper to navigate the tree to a target node, perform the manipulation locally, then restore the tree.
~

@doc.lookupKV.AATree
"Copy an element from the AA tree, after looking it up by key.
 
         (k*v)`AATree k [(k*k)→Ord] -- (k*v)`AATree ((k*v)+1)
 
 The tree is not modified by this operation.
~



