
@doc.Ordinal
"An ordinal comparison takes two values and returns a simple ordering:
 
         k`Compare is (k*k)→Ord
         Ord is (EQ+(LT+GT))
             represented as (1+(1+1))
 
 Here, `EQ` represents that two values are equivalent (or unordered). `LT` and `GT` indicate a less-than or greater-than ordering, assuming the normal irreflexive and transitive properties one should expect from those relationships. Ordinals can avoid a lot of rework when comparing complex objects, such as lists or streams. In many cases, e.g. when working with keys in a map, we'll assume that elements are totally ordered.
~

@doc.compareOnStackToRawCompare "[k k -- Ord] -- [(k*k)→Ord]"
@compareOnStackToRawCompare [wx] composel applyWrap

@doc.rawCompareToCompareOnStack "[(k*k)→Ord] -- [k k -- Ord]"
@rawCompareToCompareOnStack [dpw .apply] bind

@doc.mkCompareUnits "-- [1`Compare]; trivial, always equal"
@doc.mkCompareNums  "-- [Num`Compare]; raw number comparisons"
@doc.mkCompareProds "[a`Compare] [b`Compare] -- [(a*b)`Compare]"
@doc.mkCompareSums  "[a`Compare] [b`Compare] -- [(a+b)`Compare]"
@mkCompareUnits [compareUnits]
@mkCompareProds [compareProds] bind2 compareOnStackToRawCompare
@mkCompareSums  [compareSums] bind2 compareOnStackToRawCompare
@mkCompareNums  [rawCompareNumbers]

@doc.compareUnits "1 1 -- Ord"
@doc.compareProds "(a1*b1) (a2*b2) [a`Compare] [b`Compare] -- Ord"
@doc.compareSums  "(a1+b1) (a2+b2) [a`Compare] [b`Compare] -- Ord"
@compareUnits %c .inL
@compareProds 
 .rw .rw dx x swapd pw dpw .wl .apply
 [drop .wl .apply] [inR .wl drop] if
@compareSums .rw .rw [?l.compareSums] [?r.compareSums] if
@?l.compareSums .rw [.wl ll.compareSums] [.wl rl.compareSums] if
@?r.compareSums .rw [.wl lr.compareSums] [.wl rr.compareSums] if
@ll.compareSums pw .wl .apply .wl drop
@rr.compareSums pw .wl drop .wl .apply
@rl.compareSums drop2 .wl drop .wl drop intro1 inR inR
@lr.compareSums drop2 .wl drop .wl drop intro1 inL inR

@doc.rawCompareNumbers "(Num*Num)→Ord"
@rawCompareNumbers rawCompareNumbers' toOrd\1

@doc.rawCompareNumbers' "(Num(a)*Num(b))→((EQ(a*a))+(LT(a*b)+GT(b*a)))"
@rawCompareNumbers' %vrw> [%vr>c] %r?Rc

@doc.toOrd "(eq+(lt+gt)) -- (1+(1+1)); droppable eq,lt,gt"
@doc.toOrd\1 "(eq+(lt+gt))→(1+(1+1))"
@toOrd\1  %v e.toOrd %c
@e.toOrd  %VRWRW [%v%] %r?W [%v%] %r?LW [%v%] %r?LC
@toOrd    %r e.toOrd %l

@doc.compareLists "k`L k`L [k`Compare] -- Ord; compare lists item by item"
@compareLists take fromList.s take fromList.s put2 compareStreams

@doc.compareStreams "k`S k`S [k`Compare] -- Ord; compare streams item by item"
@compareStreams [step.compareStreams] bind fixpoint inline
@step.compareStreams 
 swap take2 intro1 .applyd take intro1 .applyd 
 [a.compareStreams] [-a.compareStreams] if
@a.compareStreams  put [ab.compareStreams]  [a-b.compareStreams] if
@-a.compareStreams put [b-a.compareStreams] [-ab.compareStreams] if
@ab.compareStreams 
 dx x swapd pw put .apply
 [drop put inline] [inR discard nip2] if
@a-b.compareStreams drop2 discard2 intro1 inR inR
@b-a.compareStreams drop2 discard2 intro1 inL inR
@-ab.compareStreams drop2 discard2 intro1 inL

@doc.compareTexts "text text -- Ord; compare texts lexicographycally by codepoint order"
@compareTexts [rawCompareNumbers'] compareLists toOrd

@doc.mkCompareLists "[(a*a)→Ord] -- [(a`L * a`L)→Ord]"
@doc.mkCompareStreams "[(a*a)→Ord] -- [(a`S * a`S)→Ord]"
@doc.mkCompareTexts "-- [(text*text)→Ord]"
@mkCompareLists [compareLists] bind compareOnStackToRawCompare
@mkCompareStreams [compareStreams] bind compareOnStackToRawCompare
@mkCompareTexts [compareTexts] compareOnStackToRawCompare


