boolean

@doc.ConditionalBehavior
"Awelon expresses conditional behavior using sum types. A sum type, `(a + b)`, indicates a value that is either left in `a` or right in `b`. A boolean, having exactly two values, can be modeled as `(1 + 1)` where 1 is the unit type (having exactly one value). Though, for various reasons, Awelon does not encourage use of booleans. Many useful data structures are also modeled with sums, e.g. a list is modeled with type `µL.((a*L)+1)`, or an optional value with `(a+1)`.
 
 Sum types can be computed by comparing numbers (via ABC operator `>`) or building more sophisticated observations above this primitive. Sums may also be returned from effectful observations or actions. By convention, the 'right' side of a sum is often punned with 'true', 'success', or 'complete' depending on the context. That is just a mnemonic, though; the formal semantics of sums is purely structural.
 
 Conditional behavior is expressed by applying a block to just the left or right side of a sum (via ABC operator `?`). The block may be affine (no copy), but must not be relevant (no drop). In addition, values may be explicitly distributed into a sum, or extracted from it. Conventional if/then/else behavior is modeled by distributing two programs then conditionally extracting one of them.
~

@not      %rVRWLCl
@notd     swap not swap
@eqv.id.notnot  [not not] []

@doc..mirror "(a+b)*e→(b+a)*e"
@.mirror %VRWLC
@mirror not

@doc.inR "b -- (0 + b); wrap 'b' in success, mark true, in the right"
@doc.inL "a -- (a + 0); wrap 'a' in failure, mark false, on the left"
@inR %rVVRWLCl
@inL %rVl
@inRd .rw inR .wl
@inLd .rw inL .wl

@doc..inR "a→(0+a); primitive inR"
@doc..inL "a→(a+0); primitive inL"
@.inR %vVVRWLCc
@.inL %vVc

@doc.distribInR "b -- (b + b); in right; as `inR` but preserves x's type info in left"
@doc.distribInL "a -- (a + a); in left; as `inL` but preserves x's type info in right"
@distribInL false.b swap distrib trimBoolean
@distribInR distribInL mirror
@distribInLd .rw distribInL .wl
@distribInRd .rw distribInR .wl

@doc.distrib "(a + b) c -- ((c*a) + (c*b))"
@doc.partialFactor "((a*b)+(c*d)) -- (b + d) (a + c)"
@doc.merge   "(a + a') -- a; a and a' must be future compatible"
@doc.fullFactor "((a+b)+(a'+d)) -- (b+d) a"
@distrib p %rrDl
@partialFactor %rFll x
@merge %rMl
@merged .rw merge .wl
@fullFactor %rFMll x

@doc.condSwap "conditional swap; swap top two arguments if third in right"
@condSwap p distrib %r [%rwl] %r?l fullFactor wx

@doc.condSelect "(a+b) x y -- a x OR b y; select one value, and merge the other"
@condSelect p distrib %r [%rwl] %r?l merge x fst

@doc..eitherBind "(a+b) [(a*e)→e'] [(b*e)→e'] -- ([e→e']+[e→e'])"
@.eitherBind pw distrib %r [%rw%vrw'oc] %r?VRW [%r%vrw'oc] %r?WLC %l

@doc.eitherBind "(a+b) [..e a -- ..e'] [..e b -- ..e'] -- ([..e--..e']+[..e--..e'])"
@eitherBind .rw [%l] composel .wl [%l] composel .eitherBind

@doc.condSelect_ "(a+b) x y -- x (if in a) OR y (if in b); select value and drop condition"
@condSelect_ p distrib %r [%rwl] %r?FMw%l fst

@doc.if 
"The 'if' function enables developers to conveniently model conditional behavior. It operates by selecting a block then invoking it. A few variations of 'if' are provided based on whether you need access to the conditional, and whether you wish to keep it.
 
         if  :: ..a (L+R) [..a L -- ..b] [..a R -- ..b] -- ..b
         if_ :: ..a (L+R) [..a -- ..b]   [..a -- ..b]   -- ..b
         ifk :: ..a (L+R) [..a L -- ..b] [..a R -- ..b] -- ..b (L+R)
         ifd :: ..a (L+R) [..a -- ..b]   [..b -- ..b]   -- ..b (L+R)
                          on left/false  on right/true  
 
 Only `if` and `if_` can be used where tail-call optimization is needed.
 
 The main weakness of 'if' behaviors is that they're difficult to extend or compose. They're effectively 'closed' syntactically. Developers are under pressure to push a lot of logic into those blocks. ABC is based on sum types (L+R) to better support composition of conditional behavior, but to leverage sum types requires alternative idioms (such as incremental processes or RDP). 
~
@doc.if_ "..a (L+R) [..a -- ..b]   [..a -- ..b]   -- ..b      ; see @doc.if"
@doc.ifk "..a (L+R) [..a L -- ..b] [..a R -- ..b] -- ..b (L+R); see @doc.if"
@doc.ifd "..a (L+R) [..a -- ..b]   [..a -- ..b]   -- ..b (L+R); see @doc.if"

@if  eitherBind merge inline
@if_ condSelect_ inline
@ifk dupdd eitherBind merge dip
@ifd condSwap drop dip

@test.if 
  3 inL [inc] [mul2] if         4 assertEQ1.n
  3 inR [inc] [mul2] if         6 assertEQ1.n
@test.if_
  3 false.b [inc] [mul2] if_    4 assertEQ1.n
  3 true.b  [inc] [mul2] if_    6 assertEQ1.n
@test.ifk
  3 inL [inc] [mul2] ifk        3 inL assertEQ1     4 assertEQ1d.n  
  3 inR [inc] [mul2] ifk        3 inR assertEQ1     6 assertEQ1d.n  
@test.ifd
  3 false.b [inc] [mul2] ifd    false.b assertEQ1   4 assertEQ1d.n
  3 true.b  [inc] [mul2] ifd    true.b assertEQ1    6 assertEQ1d.n

@doc.when  "..a (L+R) [..a R -- ..a] -- ..a"
@doc.when_ "..a (L+R) [..a -- ..a] -- ..a"
@doc.whenk "..a (L+R) [..a R -- ..a] -- ..a (L+R)"
@doc.whend "..a (L+R) [..a -- ..a] -- ..a"

@when  [drop] swap if
@whenk [drop] swap ifk
@when_ [] swap if_
@whend [] swap ifd

@doc.unless  "..a (L+R) [..a L -- ..a] -- ..a"
@doc.unless_ "..a (L+R) [..a -- ..a] -- ..a"
@doc.unlessk "..a (L+R) [..a L -- ..a] -- ..a (L+R)"
@doc.unlessd "..a (L+R) [..a -- ..a] -- ..a (L+R)"

@unless  [drop] if
@unlessk [drop] ifk
@unless_ [] if_
@unlessd [] ifd

@doc..left  "(a + b) [a→a'] -- (a' + b); apply block on left condition"
@doc..right "(a + b) [b→b'] -- (a + b'); apply block on right condition"
@doc..either "(a + b) [a→a'] [b→b'] -- (a' + b')"
@.left p %rr?l
@.right notd .left not
@.either unrot .left swap .right

@eqv.cca+ [.either] [swap take2 not put2 .either not]

@doc.wrapObserver.b "[a--Bool] -- [a--(a+a)]; Copyable a"
@wrapObserver.b [keep] bind [distrib [%c] .left [%c] .right] compose

@doc.wrapKeyObserver.b "[k--Bool] -- [(k*v)--((k*v)+(k*v))]; Copyable k"
@wrapKeyObserver.b 
    quote [dupfst swap] composel 
    [dip distrib [%c] .left [%c] .right] compose

@doc.assert 
"Awelon offers a primitive to assert that a condition is not false, i.e. that `(a + b)` is certainly not in `a`. (This isn't to say the condition is in `b`. The assertion itself might be dead code.) Since the condition after a successful assertion is not false, we eliminate the sum type and just continue with `b`.
 
     assert :: (a + b) -- b
 
 Assertions are useful to model preconditions, postconditions, contracts; to support inference of dependent types; and for automatic testing (test. words). Ideally, an assertion can be proven statically and removed from the runtime code. If an assertion cannot be proven, a compiler is free to issue a warning. A runtime failure will halt the program as quickly and cleanly as feasible while maintaining performance. (Explicit capabilities may allow confinement of subprogram failure.)
 
 Specialized assertions can be constructed above the basic assert, e.g. to test numbers or text labels. Search for words whose name starts with `assert` to find some appropriate for your purpose.
~
@assert   %rKl

@doc.assertInR "(a+b) -- b; see `doc.assert`"
@assertInR assert

@doc.assertInL "(a+b) -- a; see `doc.assert`"
@assertInL mirror assert

@doc.inLL "a -- ((a+0)+0); in left-left"
@doc.inLR "a -- ((0+a)+0); in left-right"
@doc.inRL "a -- (0+(a+0)); in right-left"
@doc.inRR "a -- (0+(0+a)); in right-right"
@inLL inL inL
@inLR inR inL
@inRL inL inR
@inRR inR inR

@inLLL inLL inL
@inLRL inRL inL
@inLLR inLR inL
@inLRR inRR inL
@inRLR inLR inR
@inRRR inRR inR
@inRLL inLL inR
@inRRL inRL inR

@inLLLL inLLL inL
@inLLLR inLLR inL
@inLLRL inLRL inL
@inLLRR inLRR inL
@inLRLL inRLL inL
@inLRLR inRLR inL
@inLRRL inRRL inL
@inLRRR inRRR inL
@inRLLL inLLL inR
@inRLLR inLLR inR
@inRLRL inLRL inR
@inRLRR inLRR inR
@inRRLL inRLL inR
@inRRLR inRLR inR
@inRRRL inRRL inR
@inRRRR inRRR inR

@inLLLLL inLLLL inL
@inLLLLR inLLLR inL
@inLLLRL inLLRL inL
@inLLLRR inLLRR inL
@inLLRLL inLRLL inL
@inLLRLR inLRLR inL
@inLLRRL inLRRL inL
@inLLRRR inLRRR inL
@inLRLLL inRLLL inL
@inLRLLR inRLLR inL
@inLRLRL inRLRL inL
@inLRLRR inRLRR inL
@inLRRLL inRRLL inL
@inLRRLR inRRLR inL
@inLRRRL inRRRL inL
@inLRRRR inRRRR inL
@inRLLLL inLLLL inR
@inRLLLR inLLLR inR
@inRLLRL inLLRL inR
@inRLLRR inLLRR inR
@inRLRLL inLRLL inR
@inRLRLR inLRLR inR
@inRLRRL inLRRL inR
@inRLRRR inLRRR inR
@inRRLLL inRLLL inR
@inRRLLR inRLLR inR
@inRRLRL inRLRL inR
@inRRLRR inRLRR inR
@inRRRLL inRRLL inR
@inRRRLR inRRLR inR
@inRRRRL inRRRL inR
@inRRRRR inRRRR inR
