% This module simply repeats the *subset* of Awelon words that the
% interpreter for the AVM provides. Naturally, this subset is small 
% as I can make it, which means it's a subset of primitives.
%
import avmprim


% BASIC DATA PLUMBING  
%   swap       :: (x * y) ~> (y * x)
%   assocl     :: (x * (y * z)) ~> ((x * y) * z)
%   intro1     :: x ~> (Unit * x)
%   elim1      :: (Unit * x) ~> x
%   rot3       :: (a * (b * (c * d))) ~> (c * (a * (b * d)))
%
%   first      :: (x ~> x') * (x * y) ~> (x' * y)
%   compose    :: ((x ~> y) * (y ~> z)) ~> (x ~> z)
%
% Note that 'rot3' is a primitive. It was introduced as a primitive
% just to support blockless data-plumbing which is useful for the
% bootstrap and language minimalism.
%
swap        = avmprim:swap
assocl      = avmprim:assocl
rot3        = avmprim:rot3
intro1      = avmprim:intro1
elim1       = avmprim:elim1
first       = avmprim:first        
%compose     = avmprim:staticBlockCompose

% COPY PRIMITIVES
%   copyBlock  :: Static Block ~> (Static Block * Static Block)
%   copyText   :: Static Text ~> (Static Text * Static Text)
%   copyNumber :: Static Number ~> (Static Number * Static Number)
% These are primitives provided by the avm, ultimately, so the defs
% are pretty simple. They're just necessary for the bootstrap.
%
%copyText    = avmprim:staticTextCopy
%copyBlock   = avmprim:staticBlockCopy
%copyNumber  = avmprim:staticNumberCopy


