loops

@doc.Transducer
"Transducers are a simple model for *eager* processing of collections, which abstracts the step function. For a full explanation, see the Strangeloop presentation [1](https://www.youtube.com/watch?v=6mTbuzafcII). Hickey's preliminary model for transducers:
 
          step       :: [(val * state) → state]
          transducer :: [step → step]
 
 With this model, given a state and collection of values, we could return a final state. But several features are missing here. First, we have no way to short-circuit and indicate we're done processing. Second, we have no way to represent stateful behaviors. If we add those features, we end up with something closer to:
 
          step' :: µStep . ∀state. [(arg*state)→((Step*state) + done)]
 
 At this point, we need fixpoint behaviors to model stateful steps. And we still need completion or initialization. Hickey's transducers are seeming very ad-hoc. Should I continue to develop transducers? I'm leaning towards 'no', at least not in full. But [elastic processes](doc/ElasticProcesses) should cover most of the same use cases.
~



