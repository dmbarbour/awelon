@doc.Math
"Awelon Bytecode (ABC) has a built in number type for exact rational numbers, and a small set of primitive operators (`+*-/Q` for add, multiply, negate, reciprocal, divmod) for manipulating these numbers. This is suitable for basic arithmetic. In some cases, a runtime may use inexact number representations, guided by annotation... but exact math is the default.
 
 Awelon Object (AO) language provides convenient representation of numbers - e.g. decimal, hexadecimal, fractional. In addition, it is envisioned (though not yet practiced) that AO should make heavy use of units information - e.g. distinguishing 4 kilograms from 4 litres, i.e. as an alternative to conventional typing disciplines. Units are relatively easy to express in concatenative languages, e.g. the word `kilograms` might take a number off the stack and wrap it with the appropriate unit structure. 
 
 On the assumption that most AO math functions shall support operators, the 'primitive' math operations are named with prefix `.`, as in `.add` and `.mul`. In addition, there is a class of pure math functions that operate on pairs or single values, meant for use with process models and stream processing, which have the form `add\N` and `mul\N`, where N is the arity.
 
 Sadly, concatenative languages are not very nice for expressing sophisticated algebraic formula. The stack shuffling, duplication, and data plumbing can interfere greatly with comprehension compared to a more declarative approach. To address this we can feasibly leverage embedded DSLs and partial evaluation. Compare:
 
     drop dup dup .mul swap .abs rot3 dup .mul swap .sub .add
     drop [.square] [.abs] bi .neg [.square] dip .add
     "x y z → y^2 + x^2 - |y|" doTheMath
 
 These three lines essentially express the same behavior (assuming suitable implementations of each word), but the latter is decidedly more declarative and comprehensible. Unfortunately, it's still stuck in a nasty string. Long term, embedded DSLs should be able to leverage [embedded literal objects](http://awelonblue.wordpress.com/2014/07/22/embedded-literal-objects/) to achieve rich, compositional structure with various maths.
~

@doc..mul "N(b) N(a) -- N(a*b)"
@doc..add "N(b) N(a) -- N(a+b)"
@doc..neg "N(a) -- N(-a)"
@doc..inv "N(a) -- N(1/a); a must be non-zero"
@doc..divMod "N(a) N(b) -- N(r) N(q) where a=q*b+r and r in (b,0] or [0,b)"
@doc..quot "just the quotient from .divMod"
@doc..rem "just the remainder from .divMod"
@doc..sub "N(a) N(b) -- N(a-b)"
@doc..div "N(a) N(b) -- N(a/b)"
@doc..square "N(a) -- N(a^2)"
@doc..abs "N(a) -- N(|a|)"

@.mul p %rr*l
@.add p %rr+l
@.neg %r-l
@.inv %r/l
@.divMod p %rrQll wx
@.quot .divMod nip
@.rem  .divMod drop
@.sub .neg .add
@.div .inv .mul
@.square dup .mul
@.abs %r inner..abs %l
@inner..abs 0 %r> [%-vrw%c] %r?VRW [%%] %r?WLCM

@doc.add\2 "(N(a)*N(b))→N(a+b)"
@doc.mul\2 "(N(a)*N(b))→N(a*b)"
@doc.neg\1 "N(a)→N(0-a)"
@doc.inv\1 "N(a)→N(1/a)"
@doc.divMod\2 "(N(a)*N(b))→(N(q)*N(r)); a = qb+r; q integral, r between 0 and b"
@doc.quot\2 "(N(a)*N(b))→N(q); just quotient from divMod\2"
@doc.rem\2  "(N(a)*N(b))→N(r); just remainder from divMod\2"
@doc.sub\2  "(N(a)*N(b))→N(a-b)"
@doc.div\2  "(N(a)*N(b))→N(a/b)"
@doc.square\1 "N(a)→N(a^2)"
@doc.abs\1  "N(a)→N(|a|)"

@add\2 %vr+c
@mul\2 %vr*c
@neg\1 %v-c
@inv\1 %v/c
@divMod\2 %vrwQwlc
@quot\2 %vrwQ%c
@rem\2  %vrwQw%c
@sub\2  %vrw-+c
@div\2  %vrw/*c
@square\1 %v^*c
@abs\1  %v inner..abs %c

@+ .add
@* .mul
@/ .div
@doc.÷ "This is unicode division, U+F7. Just because."
@÷ .div
@~ .neg
@doc.− "unicode minus, U+2212"
@− .sub
@- .sub

@test.math.mul 6 7 .mul 42 assertEQ
@test.math.add 6 7 .add 13 assertEQ
@test.math.sub 13 6 .sub 7 assertEQ
@test.math.div 42 6 .div 7 assertEQ
@test.math.divFrac 42 9 .div 14/3 assertEQ
@test.math.square 7 .square 49 assertEQ
@test.math.quotient 11 3 .quot 3 assertEQ
@test.math.remainder 11 3 .rem 2 assertEQ
@test.math.remainderFrac 10 4/3 .rem 2/3 assertEQ
@test.math.abs 
    3 .abs 3 assertEQ1
    0 .abs 0 assertEQ1
   -3 .abs 3 assertEQ1

@test.add\2 6 7 pw [add\2] .apply 13 assertEQ
@test.mul\2 6 7 pw [mul\2] .apply 42 assertEQ
@test.neg\1 7 [neg\1] .apply -7 assertEQ
@test.inv\1 8 [inv\1] .apply 1/8 assertEQ
@test.quot\2
  11 3    pw [quot\2] .apply 3 assertEQ1
  11 2/3  pw [quot\2] .apply 16 assertEQ1
  11 -2/3 pw [quot\2] .apply -17 assertEQ1
@test.rem\2
  11 3    pw [rem\2] .apply 2 assertEQ1
  11 2/3  pw [rem\2] .apply 1/3 assertEQ1
  11 -2/3 pw [rem\2] .apply -1/3 assertEQ1
@test.sub\2 13 6 pw [sub\2] .apply 7 assertEQ1
@test.div\2 42 6 pw [div\2] .apply 7 assertEQ1
@test.square\1 9 [square\1] .apply 81 assertEQ1
@test.abs\1 -3 [abs\1] .apply 3 assertEQ1


@inc %r 1 %r+l
@incd swap inc swap
@dec %r -1 %r+l
@decd swap dec swap
@mul2 %r 2 %r*l

@inc\1  %v 1  %r+c
@dec\1  %v -1 %r+c
@mul2\1 %v 2  %r*c

@id.mul1 1 .mul
@id.div1 1 .div
@id.add0 0 .add
@id.sub0 0 .sub

@doc.fibonacci "N -- fib(N); the 'hello world' of functional programming ;)"
@fibonacci 1 0 [dup swapd .add] roll repeat dropd
@test.fibonacci 11 fibonacci 89 assertEQ1.n

@doc.deprecated.assert
"(A lot of assertions need to be repaired after the monomorphic change to the `>` operator in April 2014).
  
     assertLT, assertLTE -- assert upper bounds for a comparable value
     assertGT, assertGTE -- assert lower bounds for a comparable value
 
 And common number assertions...
 
     assertInteger, assertNatural, assertNatural+  -- assertions on number types
     assertGTz, assertGTEz -- assert greater than or equal to zero
     assertEQz, assertNEQz -- assert equal or not equal to zero
     assertLTz, assertLTEz -- assert less than or equal to zero
     assertNatural -- integer greater than or equal to zero
     assertChar -- integer between 0 and 1114111 inclusive
     assertOctet -- integer between 0 and 255 inclusive
     assertProb -- rational number between 0 inclusive and 1 inclusive
     assertUniform -- rational number between 0 inclusive and 1 exclusive
 
 In an effectful program, some assertions may have dynamic nature. In that case, modulo use of capabilities designed to isolate failure, a dynamic assertion failure causes the whole program to be halted as quickly and cleanly as feasible.
~


@doc..gt  "a b -- ((a*b) + (b*a)); a > b?; for numbers a,b"
@doc..lt  "a b -- ((b*a) + (a*b)); a < b?; for numbers a,b"
@doc..gte "a b -- ((a*b) + (b*a)); a ≥ b?; for numbers a,b"
@doc..lte "a b -- ((b*a) + (a*b)); a ≤ b?; for numbers a,b"
@.gt  p %rr>l
@.lt  p %rrw>l
@.gte .lt not
@.lte .gt not

@gt  .gt
@lt  .lt
@gte .gte
@lte .lte

@test.gt 12 11 .gt assert
@test.lt 11 12 .lt assert
@test.gte.e 12 12 .gte assert
@test.lte.e 11 11 .lte assert
@test.gte.g 12 11 .gte assert
@test.lte.l 11 12 .lte assert

@test.gt.sort.a 5 3 .gt merge x 3 assertEQ1.n 5 assertEQ1d.n
@test.gt.sort.b 3 5 .gt merge x 3 assertEQ1.n 5 assertEQ1d.n  

@doc..gt1 "a x -- (a + a); a > x?; for numbers a,x"
@doc..lt1 "a x -- (a + a); a < x?; for numbers a,x"
@doc..gte1 "a x -- (a + a); a ≥ x?; for numbers a,x"
@doc..lte1 "a x -- (a + a); a ≤ x?; for numbers a,x"
@.gt1 .lte1 not
@.lt1 .gte1 not
@.lte1 p %rr>  [.fst] %r? .mirror [.snd] %r?l
@.gte1 p %rrw> [.snd] %r? .mirror [.fst] %r?l

@gt1 .gt1
@lt1 .lt1
@lte1 .lte1
@gte1 .gte1

@doc..gtb "a x -- Bool; a > x?; for numbers a,x"
@doc..ltb "a x -- Bool; a < x?; for numbers a,x"
@doc..gteb "a x -- Bool; a ≥ x?; for numbers a,x"
@doc..lteb "a x -- Bool; a ≤ x?; for numbers a,x"
@.gtb .gt toBoolean
@.ltb .lt toBoolean
@.gteb .gte toBoolean
@.lteb .lte toBoolean

@gtb  .gtb
@ltb  .ltb
@gteb .gteb
@lteb .lteb

@doc.eq  "a b -- ((LT(a*b) + GT(b*a)) + EQ(b*a)); for numbers a,b"
@doc.neq "a b -- (EQ(b*a) + (LT(a*b) + GT(b*a))); for numbers a,b"
@eq neq not
@neq gt [%vr>c] .left %rRl

@doc.eq1 "a x -- ((a(<x) + a(>x)) + a(=x)); for numbers a,x"
@doc.neq1 "a x -- (a(=x) + (a(<x) + a(>x))); a ≠ x?; for numbers a,x"
@eq1 neq1 not
@neq1 neq %r [.snd] %r? %VRWR [.fst] %r? %W [.snd] %r? %WLWLC %l

@doc.eq1m "a x -- (a(≠x) + a(=x)); for numbers a,x"
@doc.neq1m "a x -- (a(=x) + a(≠x)); for numbers a,x"
@eq1m eq1 [%vMc] .left
@neq1m eq1m not

@doc.eqb "a b -- Bool; a = b?; for numbers a,b"
@doc.neqb "a b -- Bool; a ≠ b?; for numbers a,b"
@eqb eq toBoolean
@neqb neq toBoolean


@assertLT     lt assert wx
@assertLTE    lte assert wx
@assertGT     gt assert x
@assertGTE    gte assert x
@assertEQ.n   eq assert x
@assertEQ1.n  assertEQ.n drop
@assertNEQ.n  neq assert [%vrwlc] .left merge x

@doc.assertEQ1d.n "N(x) N(y) N(x) -- N(x) N(y); assert x's are equal, useful for testing"
@assertEQ1d.n   swapd assertEQ1.n swap
@assertEQ1dd.n  rotd  assertEQ1.n unrot
@assertEQ1ddd.n rolld assertEQ1.n unroll

@assertLTz  0 assertLT drop
@assertLTEz 0 assertLTE drop
@assertGTz  0 assertGT drop
@assertGTEz 0 assertGTE drop
@assertEQz  0 assertEQ.n drop
@assertNEQz 0 assertNEQ.n drop

@doc..assertUnit "1→1; assert singular value is unit"
@.assertUnit %vvrwlcc

@assertUnit   elim1 intro1
@assertProd   w w
@assertSum    mirror mirror
@assertNumber 0 .add

@assertInteger  dup 1 .rem assertEQz drop
@assertNatural  assertGTEz assertInteger
@assertNatural+ assertGTz  assertInteger
@assertChar     assertNatural 0x10ffff assertLTE drop
@assertOctet    assertNatural 256 assertLT drop
@assertProb     assertGTEz 1 assertLTE drop
@assertUniform  assertGTEz 1 assertLT drop

@id.assertInR inR assert
@id..assertUnit .assertUnit
@id.assertLT assertLT
@id.assertLTE assertLTE
@id.assertGT assertGT
@id.assertGTE assertGTE
@id.assertEQ.n assertEQ.n
@id.assertNEQ.n assertNEQ.n
@id.assertLTz assertLTz
@id.assertGTz assertGTz
@id.assertGTEz assertGTEz
@id.assertLTEz assertLTEz
@id.assertEQz assertEQz
@id.assertInteger assertInteger
@id.assertNatural assertNatural
@id.assertNatural+ assertNatural+
@id.assertChar assertChar
@id.assertProb assertProb
@id.assertUniform assertUniform
