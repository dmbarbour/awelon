@doc.Processes
"In conventional imperative languages, a process is modeled as a procedure that enters an indefinite loop, which typically cycles between effectfully waiting for input and effectfully emitting outputs. This is an AWFUL process model! It is extremely difficult to externally compose, control, reuse, or extend these 'encapsulated loop' processes.
 
 In AO, we instead favor incremental processes. 
 
 Precisely, we model one step of a process. This step consumes one input and produces one output, and may encapsulate state that influences how the process responds to future inputs. The minimal type for a process is (abstractly):
 
     type Process a b = µP. [a→(P*b)]
         shorthand notation: [a↣b] (↣ is U+21A3)
 
 Here `µP` indicates a recursive or fixpoint type. In each step, a process accepts an input `a`, generates output `b`, and determines the behavior for the next step, `P`. This design offers simple process control: a process may be suspended between steps, and feedback loops always take at least one step.
 
 AO's actual process type is described in @doc.ProcessRep, and enables processes to operate and encapsulate state within a more conventional environment.
 
 Incremental processes can composed in sequence, in parallel, and in conditional or switching network styles (using sum types). Dynamic processes are readily modeled. Each step consumes exactly one input and produces exactly one output; however, the input or output may be a collection type. It is feasible to model 'environments' containing named processes that can dispatch or route collections of messages.
 
 Usefully, flexible composition greatly alleviates conventional requirements for shared state and side-effects. 
 
 An AO service or application could feasibly be modeled as a process. In this case, the top-level loop would be implicit, provided by the compiler or runtime. Such a process could even be persistent by serializing the underlying ABC, and thus model long-running workflows. Unfortunately, processes still have a significant weakness as a foundation for services or applications: they encapsulate state! The behavior `P` of a process will diverge from the original source code. This hinders live programming, continuous deployment, mirroring and replication, debugging. Awelon project favors RDP for service or app behavior.
 
 Even so, processes are useful for processing streams and lists, and may serve a useful role for bootstrapping or integrating awelon with more conventional systems.
~

@doc.ProcessRep
"The abstract model for a process is µP.[a→(P*b)]. This abstract model can be implemented directly, but it requires abundant use of fixpoints and quotations, which can be difficult to optimize. Further, it doesn't integrate nicely with conventional AO words.
 
 An alternative implementation model can alleviate these issues.
 
     type Process a b = ∃e,s. ([((a*s)*e)→((b*s)*e)] * (s*e))
 
 This treats each process as encapsulating its own, complete environment, albeit with the step argument added to the stack each step, and the result removed from the stack. Dynamic processes can be modeled as processes that compute and execute internal processes, easily enough.
 
 This implementation model is sealed to hinder accidental dependency on the implementation. In the future, the implementation model may change to support symbolic optimizations and so on.
~
@doc.suffix.p doc.Processes

@sealer.p [%{:p}]
@unsealer.p [%{.p}]
@seal.p sealer.p .apply
@unseal.p unsealer.p .apply


@doc.step.p "a [a↣b] -- b [a'↣b']; run process one step"
@step.p
 unseal.p
 p %rr$l x
 seal.p

@doc.id.p "-- a↣a"
@doc.compose.p "a↣b b↣c -- a↣c"
@doc.composel.p "b↣c a↣b -- a↣c"
@id.p [] lift.p
@composel.p swap compose.p
@compose.p
 swap unseal.p swap unseal.p
 p %rr
 [step.compose.p] .fixpoint
 .bind .bind seal.p
@step.compose.p
 %v
 

@doc.inc.p "[N(x)↣N(x+1)]"
@inc.p [%v 1 %r+c] lift.p
@dec.p [%v -1 %r+c] lift.p


@doc.lift.p "[a→b] -- (a↣b)"


@doc..lifts.p "s [(s*a)→(s*b)] -- (a↣b)"
@doc..liftws.p "s [(a*s)→(b*s)] -- (a↣b)"


@doc.liftFE.p "[a--b] -- ((a*s)*e ↣ (b*s')*e')"
@liftF.p "TODO: a sort of inverted fixpoint; duplicate process at end"
@liftS.p "Similar to liftF, except also need to bind state"


@doc.suffix.abstract.p "naive implementations of the abstract process model"
@doc.lift.abstract.p "[a→b] -- µP.[a→(P*b)]"
@lift.abstract.p .bsecond .fixfirst
@doc.step.abstract.p "a [a↣b] -- b [a'↣b']; run process one step"
@step.abstract.p .apply x
@inc.abstract.p [%v 1 %r+c] lift.abstract.p
@dec.abstract.p [%v -1 %r+c] lift.abstract.p
@test.inc.abstract.p 
  11 inc.abstract.p 
  [step.abstract.p] 16 repeat
  swap 27 assertEQ
