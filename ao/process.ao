@doc.Processes
"In conventional imperative languages, a process is modeled as a procedure that enters an indefinite loop, which typically cycles between effectfully waiting for input and effectfully emitting outputs. This is an AWFUL process model! It is extremely difficult to externally compose, control, reuse, or extend these 'encapsulated loop' processes.
 
 In AO, we instead favor incremental processes. 
 
 Precisely, we model one step of a process. This step consumes one input and produces one output, and may encapsulate state that influences how the process responds to future inputs. The minimal type for an incremental process is (abstractly):
 
     type Process a b = µP. [a→(P*b)]
         shorthand notation: [a↣b] (↣ is U+21A3)
 
 Here `µP` indicates a recursive or fixpoint type. In each step, a process accepts an input `a`, generates output `b`, and determines the behavior for the next step, `P`. This design offers simple process control: a process may always be suspended between steps, and feedback loops (where an output influences a subsequent input) may always be interrupted.
 
 See @doc.ProcessRep for the actual process implementation.
 
 Incremental processes can composed in sequence, in parallel, and in conditional or switching network styles (using sum types). Dynamic processes are readily modeled. Each step consumes exactly one input and produces exactly one output; however, the input or output may be a collection type. It is feasible to model networked spaces where processes can communicate by name or indirectly through a shared service (though this becomes relatively difficult to typecheck).
 
 Usefully, flexible composition greatly alleviates conventional requirements for shared state and side-effects. 
 
 An AO service or application could feasibly be modeled as a process. In this case, the top-level loop would be implicit, provided by the compiler or runtime. Such a process could even be persistent by serializing the underlying ABC, and thus model long-running workflows. Unfortunately, processes still have a significant weakness as a foundation for services or applications: they encapsulate state! The behavior `P` of a process will diverge from the original source code. This hinders live programming, continuous deployment, mirroring and replication, debugging. Awelon project favors RDP for service or app behavior.
 
 Even so, processes are useful for processing streams and lists, and may serve a useful role for bootstrapping or integrating awelon with more conventional systems.
~

@doc.ProcessRep
"The abstract model for a process is µP.[a→(P*b)]. This abstract model can be implemented directly, but it involves opaque dynamic elements that can be very difficult for a compiler to optimize. 
 
 In addition, as this is an incremental process that will presumably be executed incrementally on multiple elements, it can be useful to think about type 'a' or `b` as a stream (a`S) of inputs. Relevantly, we can distinguish (a`S * b`S) from (a*b)`S at the symbolic optimizations layer, and only convert between them as necessary.
 
 To reduce the burden on the compiler, AO uses a symbolic model for processes and performs its own rewrite optimizations before compiling. The resulting block should then be easier to further optimize. The intention is that, in practice, processes should mostly be compiled via partial evaluation.
 
 Basic Processes (essentially an ADT based on Arrows):
 
     id    :: [a↣a]
     const :: c → [a↣(c*a)]
     fmap  :: [a→b] → [a↣b] (assume pure function; allow dead code elim)
     efmap :: [a→b] → [a↣b] (assume impure function; no dead code elim)
     state :: (∃s.([(a*s)↣(b*s)]*s)) → [a↣b]
     proc  :: (µP.[a→(P*b)]) → [a↣b]
 
     seq   :: ([a↣b]*[b↣c]) → [a↣c]
     par   :: ([a↣a']*[b↣b']) → [(a*b)↣(a'*b')]
     sum   :: ([a↣a']*[b↣b']) → [(a+b)↣(a'+b')]
 
 But this is just a start. I also expect to optimize for data shuffling primitives, and I might also want some extensible compilation model (such that new symbols and optimizations can be introduced, e.g. to optimize any stream-processing or list-processing). In some broad sense, this process model may reflect most of ABC and AO.
 
 The implementation of this symbolic model is trivial (label*value) pairs, where labels are generally text like "id" or "fmap", and the values are the arguments to the associated process. Rewrite rules mostly operate on sequences. Most complexity is shifted to the compiler, which must be aware of the symbols.
 
 The concrete implementation of processes is kept weakly abstract by a sealer and smart constructors.
~

@doc.TODO.p
"TODO: make it easy to develop rewrite rules and compilers of this form. 
 
 AO is awful for direct expression of pattern-matching and transform logics (seeing as there is no syntactic support for pattern matching), but should be okay after a layer or two abstractions and indirections, or possibly using a DSL. Mostly, I need rewrite rules on a sequence, or a grammar model for sequence-to-sequence (or stream-to-stream, or set-of-streams to set-of-streams as a weighted optimization problem). Tree-based is much less essential.
 
 TODO: make it easy to recognize pattern pairs for composition
~

@doc.suffix.p doc.Processes

@sealer.p [%{:p}]
@unsealer.p [%{.p}]
@seal.p sealer.p .apply
@unseal.p unsealer.p .apply
@unseal2.p swap unseal.p swap unseal.p


@doc.suffix.abstract.p "naive implementation of abstract process model"
@doc.lift.abstract.p "[a→b] -- µP.[a→(P*b)]"
@lift.abstract.p .bsecond .fixfirst
@doc.step.abstract.p "a [a↣b] -- b [a'↣b']; run process one step"
@step.abstract.p .apply x
@inc.abstract.p [%v 1 %r+c] lift.abstract.p
@test.inc.abstract.p 
  11 inc.abstract.p 
  [step.abstract.p] 16 repeat
  swap 27 assertEQ
