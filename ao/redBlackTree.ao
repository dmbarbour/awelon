lispy plumbing loops conditionals

@doc.RedBlackTree
"The red-black tree is a balanced binary search tree developed by Rudolph Bayer in 1972. Balance is guaranteed by ensuring that the number of 'black' nodes on a path from the root to every leaf is equal, while allowing some flexibility of structure is achieved by allowing alternating nodes on a path to be painted red. The guarantee of O(lg N) manipulations is achieved by guaranteeing that red nodes have only black children, i.e. such that the longest path in the tree (mixed red and black) is no longer than twice the shortest path in the tree.
 
 A red-black tree corresponds to a 2-4 B-tree. Compared to other self-balancing binary search trees, red-black trees have the nice property of a highly uniform structure. This makes it easier to write zippers, traversals, and hopefully results in less special-case logic (e.g. compared to a direct implementation of a B-tree) for insertion and deletion. 
 
 Proposed representation:
 
         Node:  (elem * (Color * (Tree * Tree)))   
         Tree:  1 + Node                            leaf+node
         Color: 1 + 1                               black+red
 
         shorthand: e'RBT
 
 This representation might be sealed to resist accidental manipulation (see `seal.rbt`).
 
 Here I'm using a boolean per node to indicate color. This should minimize interference for code that is independent of color, such as fmap, counting, streaming. One goal, at the moment, is to keep tree balancing lightweight - in the sense of requiring relatively little ABC. 
 
 Note: for the moment, this is implemented as just a binary search tree.
~

@doc.suffix.rbt doc.RedBlackTree

@seal.rbt   %r {:rbt} %l
@unseal.rbt %r {.rbt} %l

@seald.rbt .rw seal.rbt .wl
@unseald.rbt .rw unseal.rbt .wl

@doc.empty.rbt " -- e'RBT"
@doc.singleton.rbt "e -- e'RBT" 

@empty.rbt intro1 fromLeaf.rbt
@singleton.rbt black.rbt empty.rbt dup pw pw pw fromNode.rbt

@doc.fromNode.rbt "(elem*(Color*(Tree*Tree))) -- elem'RBT"
@doc.fromLeaf.rbt "unit -- elem'RBT"
@fromNode.rbt inR seal.rbt
@fromLeaf.rbt inL seal.rbt

@black.rbt intro1 inL
@red.rbt intro1 inR

@doc.color.rbt "e'RBT -- e'RBT color; copy color of red-black tree"
@t.color.rbt unseal.rbt [black.rbt inLd] [n.color.rbt inRd] if seald.rbt
@n.color.rbt cadr
@assertBlack.rbt t.color.rbt assertInL elim1

@doc.paintItBlack.rbt "e'RBT -- e'RBT; red node to black node"
@paintItBlack.rbt unseal.rbt r.paintItBlack.rbt seal.rbt 
@r.paintItBlack.rbt [inL] [n.paintItBlack.rbt inR] if
@n.paintItBlack.rbt black.rbt setcadr!

@doc.paintItRed.rbt "e'RBT -- e'RBT; black node to red node (no effect on leaf)"
@paintItRed.rbt unseal.rbt r.paintItRed.rbt seal.rbt
@r.paintItRed.rbt [inL] [n.paintItRed.rbt inR] if
@n.paintItRed.rbt red.rbt setcadr! 

@doc.blackHeight.rbt "e'RBT -- e'RBT Nat; count black nodes from root to leftmost leaf"
@blackHeight.rbt [t.blackHeight.rbt] take hfix hap 
@t.blackHeight.rbt unseal.rbt [discard inL 0] [n.blackHeight.rbt inRd] if seald.rbt
@n.blackHeight.rbt wx wx x hap dp dpw dpw take n.color.rbt [hsw inc hsw] [] if_ put

@doc.assertBalanced.rbt 
"Assert that a red-black tree has the same black-height on every path, and that red nodes have only black children. These two invariants ensure that a red-black tree is 'balanced' in the sense that the longest path from root to leaf is no longer than twice the shortest path, and thus no more than 2*lg(N) steps. 
 
         e'RBT -- e'RBT   (does not alter input)
 
~
@assertBalanced.rbt h.assertBalanced.rbt drop
@h.assertBalanced.rbt [t.assertBalanced.rbt] take hfix hap
@t.assertBalanced.rbt unseal.rbt [discard inL 0] [n.assertBalanced.rbt inRd] if seald.rbt
@n.assertBalanced.rbt n.color.rbt [black.assertBalanced.rbt] [red.assertBalanced.rbt] if_
@black.assertBalanced.rbt 
 wx wx x 
 hapc rot hap  
 swapd assertEQ1.n inc 
 dpw dpw dpw
@red.assertBalanced.rbt 
 wx wx x 
 assertBlack.rbt hapc rot 
 assertBlack.rbt hap 
 swapd assertEQ1.n
 dpw dpw dpw 

@doc.size.rbt "e'RBT -- e'RBT Nat; compute number of nodes in red-black tree"
@size.rbt [t.size.rbt] take hfix hap
@t.size.rbt unseal.rbt [inL 0 discard] [n.size.rbt inRd] if seald.rbt
@n.size.rbt 
 wx wx x 
 hapc rot hap 
 swapd .add inc
 dpw dpw dpw


@doc.Zipper.rbt
"A zipper to walk a red-black tree. In this case, we have a 'focus' (a particular subtree) and our context is a list of steps back to root. A step has type:
 
         Step :: (Dir * (Color * (e * Tree)))
         Dir :: Left() + Right(); direction of Step (tree is opposite child)
         Context :: List of Step (empty is at root)
         Zipper :: (Tree * Context)
 
         Shorthand e'Z.RBT
 
 A focus and a list of steps is sufficient to rebuild the tree. More importantly, it should also be sufficient (or nearly so, perhaps with a small amount of extra context) to *rebalance* the tree while rebuilding it, i.e. since we can always see the colors of the next couple nodes.
~

@doc.wrap.z.rbt "e'RBT -- e'Z.RBT; wrap tree in zipper"
@wrap.z.rbt empty.l pw
@wrapd.z.rbt .rw wrap.z.rbt .wl

@dirLeft.z.rbt intro1 inL
@dirRight.z.rbt intro1 inR

@doc.stepLeft.z.rbt "e'Z.RBT -- e'Z.RBT; step to left child (if any)"
@doc.stepRight.z.rbt "e'Z.RBT -- e'Z.RBT; step to right child (if any)"
@doc.stepUp.z.rbt "e'Z.RBT -- e'Z.RBT; step upwards to parent (if any)"

@doc.nodeLeft.z.rbt "(e*(c*(l*r))) -- (l * (L*(c*(e*r))) )"
@doc.nodeRight.z.rbt "(e*(c*(l*r))) -- (r * (R*(c*(e*r))) )"
@nodeLeft.z.rbt wc l w r wx w r dirLeft.z.rbt p pw
@nodeRight.z.rbt wc l w r wc wx w r dirRight.z.rbt p pw

@stepLeft.z.rbt x unseal.rbt [fromLeaf.rbt p] [node.stepLeft.z.rbt] if
@node.stepLeft.z.rbt nodeLeft.z.rbt wx swapd cons.l pw

@stepRight.z.rbt x unseal.rbt [fromLeaf.rbt p] [node.stepRight.z.rbt] if
@node.stepRight.z.rbt nodeRight.z.rbt wx swapd cons.l pw

@stepUp.z.rbt x take [x step.exit.z.rbt] [inR] if put p

@doc.exit.z.rbt "e'Z.RBT -- e'RBT; rebuild tree from zipper (assuming balance)"
@exit.z.rbt x take [step.exit.z.rbt] each.l put
@step.exit.z.rbt x dwc dl dwx putd [p] [pw] if_ pw r fromNode.rbt take

@doc.seekLL.z.rbt "e'Z.RBT -- e'Z.RBT; seek to leftmost leaf node"
@seekLL.z.rbt x [tree.seekLL.z.rbt] take hfix hap discard p 
@tree.seekLL.z.rbt unseal.rbt [fromLeaf.rbt] [node.seekLL.z.rbt] if
@node.seekLL.z.rbt nodeLeft.z.rbt wx consd.l

@doc.seek.z.rbt 
"Search down the zipper until we reach a tree with the requested key. 
 
         (k*v)'Z.RBT [k→Ord] -- (k*v)'Z.RBT
 
 Idempotent. If the key does not exist, we'll reach a leaf where the key could be placed.
~
@seek.z.rbt dx [tree.seek.z.rbt] bind fixpoint inline p
@tree.seek.z.rbt swap take2 unseal.rbt [leaf.seek.z.rbt] [node.seek.z.rbt] if 
@leaf.seek.z.rbt fromLeaf.rbt discard2
@node.seek.z.rbt caar put .apply [eq.node.seek.z.rbt] [lt.node.seek.z.rbt] [gt.node.seek.z.rbt] ordCase
@eq.node.seek.z.rbt fromNode.rbt discard
@lt.node.seek.z.rbt nodeLeft.z.rbt wx consd.l hap
@gt.node.seek.z.rbt nodeRight.z.rbt wx consd.l hap

@doc.exitrb.z.rbt "e'Z.RBT -- e'RBT; exit a zipper while rebalancing"
@exitrb.z.rbt exit.z.rbt 

@doc.insertKV.rbt 
"Insert a value into a red-black binary search tree. 
 
         (k*v)'RBT (k*v) [(k*k)→Ord] -- (k*v)'RBT ((k*v)+1)
 
 The trick is to rebalance the tree after insert, ensuring that the tree is never imbalanced.
~
@insertKV.rbt bindK.insertKV.rbt taked wrapd.z.rbt seek.z.rbt put inx.z.rbt
@bindK.insertKV.rbt .rw dupfst .wl .bind

@doc.inx.z.rbt
"Insert a value at current location in a zipper, then exit the zipper. Will replace current value, or add a leaf value. The exit will rebalance the tree.
 
         e'Z.RBT e -- e'RBT (e+1)
 
 If a value is replaced, the old element is returned.
~
@inx.z.rbt prc.inx.z.rbt take paintItBlack.rbt put
@prc.inx.z.rbt take x tree.inx.z.rbt p exitrb.z.rbt put
@tree.inx.z.rbt unseal.rbt [leaf.inx.z.rbt] [node.inx.z.rbt] if fromNode.rbt
@leaf.inx.z.rbt fromLeaf.rbt dup p red.rbt p put p intro1 inR take
@node.inx.z.rbt put wcar inL take

@testing.rbt pangram#1 textToTestTree.rbt 
@textToTestTree.rbt dup reverse.l zip.l empty.rbt swap [mkCompareNums insertKV.rbt drop] each.l

@doc.findKV.rbt
"Copy a `(k*v)` pair from a red-black binary search tree.
 
         (k*v)'RBT k [(k*k)→Ord] -- (k*v)'RBT ((k*v)+1)
 
 If no such key exists, a value is returned in the right.
~
@findKV.rbt .bind [tree.findKV.rbt] bind fixpoint inline put
@tree.findKV.rbt swap take2 unseal.rbt [leaf.findKV.rbt inL] [node.findKV.rbt inR] if seal.rbt
@leaf.findKV.rbt discard2 intro1 inR take
@node.findKV.rbt caar put .apply [eq.node.findKV.rbt] [lt.node.findKV.rbt] [gt.node.findKV.rbt] ordCase
@eq.node.findKV.rbt discard dupfst inL take
@lt.node.findKV.rbt wx wx x hap p pw pw
@gt.node.findKV.rbt wx wx wx hap pw pw pw

@doc.zfindKV.rbt "find using zipper (equivalent to findKV.rbt)"
@zfindKV.rbt .bind wrapd.z.rbt seek.z.rbt x tree.zfindKV.rbt p exit.z.rbt put
@tree.zfindKV.rbt unseal.rbt [intro1 inR take inL] [dupfst inL take inR] if seal.rbt

@eqv.zfind.find.rbt [zfindKV.rbt] [findKV.rbt]

@doc.removeK.rbt
"Remove a value by key from the red-black binary search tree.
 
         (k*v)'RBT k [(k*k)→Ord] -- (k*v)'RBT ((k*v)+1)
 
 We'll return the removed element.
~
@removeK.rbt .bind wrapd.z.rbt seek.z.rbt rmx.z.rbt

@doc.rmx.z.rbt
"Remove the current target of the zipper, then exit the zipper.
 
         e'Z.RBT -- e'RBT (e+1)
 
 Remove and exit are combined mostly because there isn't a well-defined
~
@rmx.z.rbt prc.rmx.z.rbt take paintItBlack.rbt put
@prc.rmx.z.rbt "todo: remove element red-black tree"





