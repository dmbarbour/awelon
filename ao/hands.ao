@doc.Hands
"In AO, the hand is modeled as a second stack. It can be used as a temporary storage for deep operations on the current stack, and also serves as an efficient semantic clipboard for ad-hoc data shuffling.
 
     (currentStack * (hand * ... ))
 
 Developers can:
 
 * take item from stack into hand
 * put top item from hand onto stack
 * data plumbing similar to regular stack
 * discard a value from the hand
 * copy an item from the stack into hand
 * paste an item in the hand onto the stack
 * swap the current stack with the hand
 * apply a tool from the hand 
 
 In addition, hands are stable when developers use navigational metaphors, i.e. to operate in different workspaces or environments. Also, hands are hidden by some operations, such as `apply`.
 
 AO encourages a "clean hands" policy: most words should have a neutral effect on the hand, and not affect or observe the values already held by it. The exception is words like `take` and `put` where the purpose is to manipulate the hand. Some common words, such as `apply`, will hide the hand, which will enforce a clean hands policy for a lot of subprograms.
 
 Developers could use named stacks in place of hands, but doing so is a lot more expensive in most cases. Named stacks are really intended for long term stable storage.
~

@put %wrzl
@take hsw put hsw
@discard put drop
@copy dup take
@paste hsw copy hsw
@hsw handStackSwap
@handStackSwap %w

@doc.hfix 
"Fixpoint the function in the hand, such that a function remains recursively available in the hand during evaluation. Intended for use with `hap` or `hapc`, potentially within an 'apply' environment. It is a common data plumbing pattern to 'take' a recursive function, since we often wish to work with some other values before applying a function recursively and the hand is a convenient place to stash the function.
~
@hfix hfix#v3
@hfix#v3 put %r [%l take] %rol .fixfirst take
@hfix#v2 put %r [%^'ol take] %ro %^'ol take
@hfix#v1 put [take] composel fixpoint take

@doc.hap "same as 'put inline'; apply a function in the hand to the environment"
@hap put inline

@doc.hapc "same as 'paste inline'; non-destructively apply function in hand to environment"
@hapc paste inline

@take2 take  take
@take3 take2 take
@take4 take3 take
@take5 take4 take
@take6 take5 take
@take7 take6 take

@put2  put   put
@put3  put2  put
@put4  put3  put
@put5  put4  put
@put6  put5  put
@put7  put6  put

@juggle2 hsw roll2 hsw
@juggle3 hsw roll3 hsw
@juggle4 hsw roll4 hsw
@juggle5 hsw roll5 hsw
@juggle6 hsw roll6 hsw

@discard2 hsw drop2 hsw 
@discard3 hsw drop3 hsw 
@discard4 hsw drop4 hsw
@discard5 hsw drop5 hsw
@discard6 hsw drop6 hsw

@copy2 dup2 take2
@copy3 dup3 take3
@copy4 dup4 take4
@copy5 dup5 take5
@copy6 dup6 take6
@copy7 dup7 take7

@paste2 hsw copy2 hsw
@paste3 hsw copy3 hsw
@paste4 hsw copy4 hsw
@paste5 hsw copy5 hsw
@paste6 hsw copy6 hsw
@paste7 hsw copy7 hsw

@taked swap take
@putd put swap

@doc.take "move value at top of stack to top of hand"
@doc.put "move value at top of hand to top of stack"
@doc.discard "drop and destroy value in hand"
@doc.copy "copy object from top of stack into hand (copy/paste metaphor)"
@doc.paste "paste object from hand onto top of stack (copy/paste metaphor)"
@doc.taked "take second item from stack"
@doc.putd "put below first item on stack"

@doc.put1st "put the first item from the hand; same as put"
@doc.put2nd "put the second item from the hand; same as 'hswap put'"
@doc.put3rd "put the third item from the hand; same as 'hrot put'"
@doc.put4th "put the fourth item from the hand; same as 'hroll put'"
@put1st put
@put2nd hswap put
@put3rd hrot put
@put4th hroll put

@doc.take1st "take the first item from the stack; same as take"
@doc.take2nd "take the second item from the stack; same as taked or swap take"
@doc.take3rd "take the third item from the stack; same as rot take"
@doc.take4th "take the fourth item from the stack; same as roll take"
@take1st take
@take2nd swap take
@take3rd rot  take
@take4th roll take

@reifyHand hsw reifyStack hsw
@restoreHand hsw restoreStack hsw
@doc.reifyHand "hand becomes single object in fresh hand"
@doc.restoreHand "single object in hand becomes hand"
@doc.swapHands "swap reified hand on stack with current hand"
@swapHands %rwzwl

@eqv.id.takePut [take put] []
@eqv.id.putTake [put take] []
@eqv.id.juggle3 [juggle3 juggle3 juggle3] []
@eqv.id.takeJugglePutSwap [take2 juggle2 put2 swap] []
@eqv.id.takeSwapPutSwapd [take swap put swapd] []
@eqv.id.copyDiscard [copy discard] []
@eqv.id.pasteDiscardTake [paste discard take] []
@eqv.id.reifyRestoreHand [reifyHand restoreHand] []
@eqv.id.take3put3 [take3 put3] []

@eqv.putDupTake2.hdup [put dup take2] [hdup]
@eqv.takeSwapPut.swapd [take swap put] [swapd]
@eqv.takeHswapPut.putSwapTake [take hswap put] [put swap take]

@hx   hsw x   hsw
@hw   hsw w   hsw
@hp   hsw p   hsw
@hwx  hsw wx  hsw
@hpw  hsw pw  hsw
@hl   hsw l   hsw
@hr   hsw r   hsw
@hdp  hsw dp  hsw
@hdx  hsw dx  hsw
@hdw  hsw dw  hsw
@hdpw hsw dpw hsw
@hdwx hsw dwx hsw
@hdl  hsw dl  hsw
@hdr  hsw dr  hsw

@hdup  hsw dup hsw
@hdupd hsw dupd hsw
@hover hsw over hsw
@htuck hsw tuck hsw
@hpick hsw pick hsw
@hdrop hsw drop hsw
@eqv.hdrop.discard [hdrop] [put drop]
@hnip hsw nip hsw
@hnip2 hsw nip2 hsw
@hdropd hsw dropd hsw
@hswap hsw swap hsw
@hswapd hsw swapd hsw
@hrot hsw rot hsw
@hunrot hsw unrot hsw
@hspin hsw spin hsw
@hroll hsw roll hsw
@hunroll hsw unroll hsw

