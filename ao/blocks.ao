@doc.Blocks
"A block in AO consists of code wrapped in square brackets, of form: `[put swap take]` or `[2 add]`. The meaning of a block is a first-class function that may be applied later. Blocks are essential in AO for:
 
 * representing loop behaviors by copying and applying blocks
 * modeling conditional behavior, apply block on just one branch
 * direct models of higher order programs and behavioral abstraction
 * transporting access and authority to resources and side-effects
 
 Best practices for use of blocks have not fully been established. Awelon project favors compositional abstractions to such an extent that use of ad-hoc parametric abstraction is discouraged. (See @doc.FirstPrincipleIsComposition.) My expectation is that blocks will be de-emphasized for behavioral abstraction in favor of indirect mechanisms - e.g. structured DSLs, symbolic expressions, free monads, staged programming. In this sense, AO would discourage conventional 'functional programming' in favor of a more 'language oriented programming'.
 
 Nonetheless, blocks remain essential for loops, effects, and conditions. Also, blocks make an effective compilation target, an alternative to interpretation, and they can help an embedded DSL model corner cases.
 
 Blocks can be composed.  Composition working together with quotation can also model such features as partial, concurrent, and conditional application.
 
     compose :: [x→y] [y→z] -- [x→z]      (sequential)
     bind    :: x [x--y] -- [--y]         (partial)
     .bind   :: x [(x*y)→z] -- [y→z]      (partial)
     .bfirst :: [x→y] -- [(x*e)→(y*e)]    (concurrent)
     .bleft  :: [x→y] -- [(x+e)→(y+e)]    (conditional)
 
 Some readers might be familiar with the notions of 'first' and 'left' from John Hughes' arrow model, which was an important foundation for AO and RDP. The primitive forms of '.curry' and '.bfirst', etc.. aren't very useable in the standard environment, but derived forms will also be available. 
 
 In addition, blocks may be constructed by quotation of a value:
 
     quote   :: (Quotable x) ⇒ x -- [-- x]
     unquote :: [-- x] -- x
 
 After construction, blocks can be applied in various ways. Developers will mostly use 'apply', which applies a block to the current environment except for the hand. Items in the current hand are hidden. But there are other operations that include (potentially) useful patterns for data hiding and application.
 
     .apply  :: x [x→y] -- y ; apply block to just top object on stack
     .applyd :: [x→y] x -- y ; apply block under object
     apply  :: x [x--y] -- y ; apply block to just top object on stack
       this variation provides a fresh stack and empty hand
       (the powerblock, named stacks, etc. are hidden)
     applyd :: [x--y] x -- y ; apply block under top object on stack
     applyNtoM :: takes N arguments on stack, generates M results on stack
       hides everything else (empty hand, no powerblock or named stacks)
       N and M in range 0..7. 0 outputs suggests effectful block.
     applyNtoMd :: applyNtoM with block below the N arguments
     applyS :: apply to full stack (hiding rest of environment)
     dip    :: h [] -- ; apply block to all except top element on stack
     dip2   :: h1 h2 [] -- ; apply block to all except top two elements
     hdip   :: [] -- ; apply block hiding current hand 
     inline :: [] -- ; apply block as if inline (hand is visible)
     keep   :: x [x -- y] -- y x; copies element on stack
 
 The set of application words will undoubtedly evolve with experience and convenience in mind.
 
 Todo: add common bi/tri variants from Factor's vocabulary
~

@doc.compose "[x→y] [y→z] -- [x→z]; compose functions"
@doc.composel "[y→z] [x→y] -- [x→z]; compose on left"
@doc.wrapfn "[x→y] [w→x] [y→z] -- [w→z]; wrap a function"

@compose p %rrol
@composel swap compose
@prepose composel
@wrapfn swapd compose compose
@.apply p %rr$l
@apply %rwrzvrwvvrrvrrz$wlcllccwlcl
@applyS %rwvvrrwvrrz$wlcwllcc
@dip %rwrzvrwr$wlcl
@hdip reifyHand putd dip take restoreHand
@inline %rvr$c
@keep dupd dip

@.applyd swap .apply
@applyd swap apply

@dip2 %rwrwrzlzvrwr$wlcrzlwl
@dip3 dpw dip2 wx
@dip4 dpw dip3 wx
@dip5 dpw dip4 wx
@dip6 dpw dip5 wx
@dip7 dpw dip6 wx
@keep2 take dup2 put dip2
@keep3 take dup3 put dip3
@keep4 take dup4 put dip4

@apply1to1 apply
@apply1to2 [pw] compose apply1to1 wx 
@apply1to3 [pw] compose apply1to2 wx
@apply1to4 [pw] compose apply1to3 wx
@apply1to5 [pw] compose apply1to4 wx
@apply1to6 [pw] compose apply1to5 wx
@apply1to7 [pw] compose apply1to6 wx

@apply1to1d roll2 apply1to1
@apply1to2d roll2 apply1to2
@apply1to3d roll2 apply1to3
@apply1to4d roll2 apply1to4
@apply1to5d roll2 apply1to5
@apply1to6d roll2 apply1to6
@apply1to7d roll2 apply1to7

@apply2to1 compressArgs apply1to1
@apply2to2 compressArgs apply1to2
@apply2to3 compressArgs apply1to3
@apply2to4 compressArgs apply1to4
@apply2to5 compressArgs apply1to5
@apply2to6 compressArgs apply1to6
@apply2to7 compressArgs apply1to7

@apply2to1d roll3 apply2to1
@apply2to2d roll3 apply2to2
@apply2to3d roll3 apply2to3
@apply2to4d roll3 apply2to4
@apply2to5d roll3 apply2to5
@apply2to6d roll3 apply2to6
@apply2to7d roll3 apply2to7

@apply3to1 compressArgs apply2to1
@apply3to2 compressArgs apply2to2
@apply3to3 compressArgs apply2to3
@apply3to4 compressArgs apply2to4
@apply3to5 compressArgs apply2to5
@apply3to6 compressArgs apply2to6
@apply3to7 compressArgs apply2to7

@apply3to1d roll4 apply3to1
@apply3to2d roll4 apply3to2
@apply3to3d roll4 apply3to3
@apply3to4d roll4 apply3to4
@apply3to5d roll4 apply3to5
@apply3to6d roll4 apply3to6
@apply3to7d roll4 apply3to7

@apply4to1 compressArgs apply3to1
@apply4to2 compressArgs apply3to2
@apply4to3 compressArgs apply3to3
@apply4to4 compressArgs apply3to4
@apply4to5 compressArgs apply3to5
@apply4to6 compressArgs apply3to6
@apply4to7 compressArgs apply3to7

@apply4to1d roll5 apply4to1
@apply4to2d roll5 apply4to2
@apply4to3d roll5 apply4to3
@apply4to4d roll5 apply4to4
@apply4to5d roll5 apply4to5
@apply4to6d roll5 apply4to6
@apply4to7d roll5 apply4to7

@apply5to1 compressArgs apply4to1
@apply5to2 compressArgs apply4to2
@apply5to3 compressArgs apply4to3
@apply5to4 compressArgs apply4to4
@apply5to5 compressArgs apply4to5
@apply5to6 compressArgs apply4to6
@apply5to7 compressArgs apply4to7

@apply5to1d roll6 apply5to1
@apply5to2d roll6 apply5to2
@apply5to3d roll6 apply5to3
@apply5to4d roll6 apply5to4
@apply5to5d roll6 apply5to5
@apply5to6d roll6 apply5to6
@apply5to7d roll6 apply5to7

@apply6to1 compressArgs apply5to1
@apply6to2 compressArgs apply5to2
@apply6to3 compressArgs apply5to3
@apply6to4 compressArgs apply5to4
@apply6to5 compressArgs apply5to5
@apply6to6 compressArgs apply5to6
@apply6to7 compressArgs apply5to7

@apply6to1d roll7 apply6to1
@apply6to2d roll7 apply6to2
@apply6to3d roll7 apply6to3
@apply6to4d roll7 apply6to4
@apply6to5d roll7 apply6to5
@apply6to6d roll7 apply6to6
@apply6to7d roll7 apply6to7

@apply7to1 compressArgs apply6to1
@apply7to2 compressArgs apply6to2
@apply7to3 compressArgs apply6to3
@apply7to4 compressArgs apply6to4
@apply7to5 compressArgs apply6to5
@apply7to6 compressArgs apply6to6
@apply7to7 compressArgs apply6to7

@apply7to1d roll8 apply7to1
@apply7to2d roll8 apply7to2
@apply7to3d roll8 apply7to3
@apply7to4d roll8 apply7to4
@apply7to5d roll8 apply7to5
@apply7to6d roll8 apply7to6
@apply7to7d roll8 apply7to7

@compressArgs dpw [wx] composel

@apply0to1 %rvvvrrvrrz$wlcllccwlcl
@apply0to2 [pw] compose apply0to1 wx
@apply0to3 [pw] compose apply0to2 wx
@apply0to4 [pw] compose apply0to3 wx
@apply0to5 [pw] compose apply0to4 wx
@apply0to6 [pw] compose apply0to5 wx
@apply0to7 [pw] compose apply0to6 wx

@apply0to0 %rvvvrrvrrz$wlcllccc

@apply1to0 %rwrzvrwvvrrvrrz$wlcllccc
@apply2to0 compressArgs apply1to0
@apply3to0 compressArgs apply2to0
@apply4to0 compressArgs apply3to0
@apply5to0 compressArgs apply4to0
@apply6to0 compressArgs apply5to0
@apply7to0 compressArgs apply6to0

@apply1to0d roll2 apply1to0
@apply2to0d roll3 apply2to0
@apply3to0d roll4 apply3to0
@apply4to0d roll5 apply4to0
@apply5to0d roll6 apply5to0
@apply6to0d roll7 apply6to0
@apply7to0d roll8 apply7to0

@test.apply4to2 
  2 3 4 5 [.add unrot .add] apply4to2 
  5 assertEQ1.n swap 
  9 assertEQ1.n

@test.apply4to2d
  [.add .mul .add 42] 2 3 4 5 apply4to2d
  42 assertEQ1.n
  29 assertEQ1d.n

@id.apply.id [id] apply
@id.compose [id] compose
@id.swap.compose [id] swap compose
@id.inline.id [id] inline

@doc.preApply "a→((a*1)*(1*1)); wrap argument in `apply` environment"
@doc.postApply "((a*1)*(1*1))→a; unwrap result from `apply` environment"
@doc.applyWrap "[a -- b] -- [a→b]; apply 1:1 stack function in `apply` environment"
@preApply %vvvr
@postApply %lccc
@applyWrap [preApply] [postApply] wrapfn
@apply.alt applyWrap .apply
@eqv.apply [apply] [apply.alt]

@doc..first "(a*b) [a→a'] -- (a'*b)"
@doc..second "(a*b) [b→b'] -- (a*b')"
@doc..both "(a*b) [a→a'] [b→b'] -- (a'*b')"
@.first take x put .apply p
@.second take pw put .first pw
@.both take .first put .second

@eqv.cca [.both] [swap take2 pw put2 .both pw]

@doc..bind "x [(x*y)→z] -- [y→z]; bind argument into pair"
@doc..bind2nd "y [(x*y)→z] -- [x→z]; bind second argument in pair"
@doc.bind "x [x -- z] -- [-- z]; bind argument onto stack"
@doc..curry "[(x*y)→z] -- [x→[y→z]]; curry pair argument"
@doc.curry "[x--z] -- [x--[--z]]; curry stack argument"
@doc..bfirst "[x→x'] -- [(x*y)→(x'*y)]"
@doc..bleft "[x→x'] -- [(x+y)→(x'+y)]"
@doc..bsecond "[y→y'] -- [(x*y)→(x*y')]"
@doc..bright "[y→y'] -- [(x+y)→(x+y')]" 
@doc..bapply "[x→x'] -- [((x*s)*e)→((x'*s)*e)]"
@.bind pw %rr'wol
@.bind2nd [.swap] composel .bind
@bind swap quote composel
@bind.old [%l] composel swap %r'l composel

@eqv.bind [bind] [bind.old]

@bind2 bind bind
@bind3 bind bind bind
@bind4 bind bind bind bind

@doc.bind2nd "x [x y -- z] -- [y -- z]"
@doc.bind3rd "w [w x y -- z] -- [x y -- z]"
@doc.bind4th "v [v w x y -- z] -- [w x y -- z]"
@bind2nd [swap] composel bind
@bind3rd [unrot] composel bind
@bind4th [unroll] composel bind

@.curry [.bind] bind
@curry  [bind]  bind
@curry2 [bind curry] bind
@curry3 [bind curry2] bind
@curry4 [bind curry3] bind

@.bfirst %r' [%$] %rol
@.bsecond %r' [%vrw] %rwo [%$wlc] %rol
@.bleft %r' [%v] %rwo [%?c] %rol
@.bright %r' [%vVRW] %rwo [%?WLCc] %rol
@.bapply [.apply] bind

@test..bfirst 
 intro1 intro1 7 p p 
 [6 %r*] .bfirst .apply 
 x x 42 assertEQ
 drop2 elim1 elim1

@test..bsecond
 intro1 intro1 7 p pw 
 [6 %r*] .bsecond .apply 
 wx x 42 assertEQ
 drop2 elim1 elim1

@test..bleft.inL
 intro1 7 p inL
 [6 %r*] .bleft .apply
 not assert x 42 assertEQ
 drop2 elim1

@test..bleft.inR
 intro1 7 p inR
 [6 %r*] .bleft .apply
 assert x 7 assertEQ
 drop2 elim1

@test..bright.inR
 intro1 7 p inR
 [6 %r*] .bright .apply
 assert x 42 assertEQ
 drop2 elim1

@test..bright.inL
 intro1 7 p inL
 [6 %r*] .bright .apply
 not assert x 7 assertEQ
 drop2 elim1

@doc.bi 
"apply two blocks to one argument.
 
     [p] [q] bi 
        is equivalent to
     [p] keep q
 
~
@bi [keep] dip inline
@bi.blockFree rot dup dp swap rot dip wx inline

@test.bi
 6 [5 .add] [7 .mul] bi
 42 assertEQ1 swap
 11 assertEQ1 swap

@doc.bi2 
"apply two blocks each to same two arguments.
 
     [p] [q] bi2 
        is equivalent to
     [p] keep2 q
 
~
@doc.bi3 "apply two blocks each to same three arguments"
@bi2 [keep2] dip inline
@bi3 [keep3] dip inline
@test.bi2
 6 7 [.add] [.mul] bi2
 42 assertEQ1 swap
 13 assertEQ1 swap

@doc.tri "[p] [q] [r] tri = [p] keep [q] keep r; apply 3 blocks to same 1 arg"
@doc.tri2 "apply 3 blocks to the same 2 args"
@doc.tri3 "apply 3 blocks each to the same 3 args"
@tri [keep] dip2 bi
@tri2 [keep2] dip2 bi2
@tri3 [keep3] dip2 bi3
@test.tri2
 6 7 [.add] [.mul] [.square swap .square .add] tri2
 85 assertEQ1 unrot
 42 assertEQ1 unrot
 13 assertEQ1 unrot

@doc.bi* "apply 2 blocks each to respective input"
@doc.bi2* "apply 2 blocks each to 2 respective inputs"
@doc.bi3* "apply 2 blocks each to 3 respective inputs"
@doc.tri* "apply 3 blocks each to respective input"
@doc.tri2* "apply 3 blocks each to 2 respective inputs"
@doc.tri3* "apply 3 blocks each to 3 respective inputs"
@bi* [dip] dip inline
@bi2* [dip2] dip inline
@bi3* [dip3] dip inline
@tri* [dip2] dip2 bi*
@tri2* [dip4] dip2 bi2*
@tri3* [dip6] dip2 bi3*

@test.tri*
 6 7 8 [9 .add] [10 .mul] [11 .sub] tri*
 -3 assertEQ1 unrot
 70 assertEQ1 unrot
 15 assertEQ1 unrot

@test.tri2*
 6 7 8 9 10 11 [.mul] [.add] [.div] tri2*
 10/11 assertEQ1 unrot
 17 assertEQ1 unrot
 42 assertEQ1 unrot

@doc.bi& "apply a single block to two different inputs"
@doc.bi2& "apply a single block to two pairs of inputs"
@doc.bi3& "apply a single block to two triples of inputs"
@doc.tri& "apply a single block to three different inputs"
@doc.tri2& "apply a single block to three pairs of inputs"
@doc.tri3& "apply a single block to three triples of inputs"
@bi& dup bi*
@bi2& dup bi2*
@bi3& dup bi3*
@tri&  dup dup tri*
@tri2& dup dup tri2*
@tri3& dup dup tri3* 

@test.bi&
 4 7 [6 *] bi& 
 42 assertEQ1 swap
 24 assertEQ1 swap
@test.tri2&
 1 2 3 4 5 6 [*] tri2&
 30 assertEQ1 unrot
 12 assertEQ1 unrot
 2  assertEQ1 unrot

@doc.Quotable
"Most values in AO are quotable. 
 
 There are some unusual exceptions. For example, distributed values (e.g. a pair of which one value is computed at the GPU and another on the CPU) are not quotable. All values entering a quote must be observable at a common location, which is then inherited by the quotation.
 
 A quotation is simply a block that reproduces a value. This typically will have special support from the implementation, but will be serialized to code when necessary for display or networking.
 
 If a block with affine or relevant properties is quoted, the quote will inherit these properties. 
~
@doc.quote "(Quotable x) ⇒ x -- [--x]"
@doc.unquote "[--x] -- x"
@quote %r' [%l] %rol
@unquote apply0to1

@test.quote  7 dup quote unquote assertEQ1
@id.quoteUnquote quote unquote

@doc.relevant "mark block on stack as relevant (not Droppable)"
@doc.affine "mark block on stack as affine (not Copyable)"
@doc.linear "mark block on stack as linear (neither Copyable nor Droppable)"
@relevant %rkl
@affine   %rfl
@linear   relevant affine

@eqv.commutative.affine&relevant [affine relevant] [relevant affine]
@eqv.idempotent.linear [linear linear] [linear]
@eqv.idempotent.affine [affine affine] [affine]
@eqv.idempotent.relevant [relevant relevant] [relevant]

@eqv.appTwice.compApp [compose apply] [unrot apply swap apply]
@eqv.inlineTwice.compInline [compose inline] [swap dip inline]
