process loops lists blocks conditionals

@doc.Streams
"A stream is an incremental sequence of values. The incremental nature gives stream processing a few advantages for reasoning about space requirements when processing very long running streams. 
 
     µS.[1→((elem*S)+1)]            shorthand: elem`S
 
 This model of streams uses the block to capture the incremental computation of the next element, and exhibits the structure of a list. These streams are also allowed to terminate, by returning unit in the right. Most uses of simple streams are for data structure processing; termination is expected. 
 
 The simple streams model isn't ideally efficient, especially with deep composition. A more sophisticated streams model or stream builder might support some rich, symbolic optimizations. There are also useful variations on the model, e.g. augmenting queries and results with time information to limit query depth or support more interesting interleave. But the simple stream model has useful applications (e.g. incremental data processing, or compilation target for integration) and remains worth developing.
 
 Words for this simple stream model use suffix `.s`
~
@doc.suffix.s doc.Streams

@doc.empty.s "-- a`S; add empty stream to stack"
@empty.s [%vvrwlcVVRWLCc]

@doc.cons.s "a`S a -- a`S; add element at head of stream"
@doc.putback.s "synonym for `cons.s`; adds element to front of stream"
@cons.s p inL %r' [%c] %rwol
@putback.s cons.s

@doc.take1.s "a`S -- a`S (a+1); take a single element (left) or indicate empty (right)"
@take1.s intro1 .applyd [x inL] [.rw empty.s .wl inR] if

@doc.singleton.s "a -- a`S; construct a single element stream"
@singleton.s empty.s swap cons.s

@doc.constant.s "a -- a`S; (copyable a); infinite stream with a single value"
@constant.s [%v^lVc] fromState.s

@test.constant.s
  111 constant.s copy 4 take.s 
  "oooo" assertTextEQ1
  put assertEQ1d

@doc.foreach.s
"Sequentially process every element from a finite stream. The type is roughly:
 
     ..b a`S [..b a -- ..b] -- ..b
 
 That is, we apply the same function with each element of the stream in the current AO environment. A non-terminating stream would cause divergence, and is an error, though it's ultimately up to the developer to avoid this error.
~
@foreach.s [step.foreach.s] .bind .fixfirst inline
@step.foreach.s 
  %wzw intro1 .applyd 
  [onElem.foreach.s] [onFini.foreach.s] if
@onFini.foreach.s elim1 %wl drop %wl drop
@onElem.foreach.s wx %wlwl dpw dip wx inline

@doc.each.s doc.foreach.s
@each.s foreach.s

@test.foreach.s
 "hello, world!" fromList.s
 0 [.add] swapd foreach.s
 1193 assertEQ1.n

@doc.fromList.s "a`L -- a`S; treat a list as a stream"
@doc.toStream.l doc.fromList.s
@toStream.l fromList.s
@fromList.s [step.fromList.s] .fixfirst .bind
@step.fromList.s %D [%vrwrwz'owlc] %r?VRW [%%] %r?WLCc

@doc.fromList\1.s "a`L → a`S; stream to list (without environment)"
@doc.toStream\1.l doc.fromList\1.s
@fromList\1.s %vv fromList.s %cc
@toStream\1.l fromList\1.s

@doc.toList.s "a`S -- a`L; extract a list from a finite stream"
@doc.fromStream.l doc.toList.s
@fromStream.l toList.s
@toList.s empty.l swap [cons.l] foreach.s reverse.l

@doc.toList\1.s "a`S → a`L; list to stream (without environment)"
@doc.fromStream\1.l doc.toList\1.s
@toList\1.s %vv toList.s %cc
@fromStream\1.l toList\1.s

@test.toList.s "hello, world!" dup fromList.s toList.s assertEQ1
@eqv.id.listToStreamToList   [fromList.s toList.s] []
@eqv.id.streamToListToStream [toList.s fromList.s] []

@doc.fromState.s "s [s → ((a*s)+1)] -- a`S; stream from state/stepper function"
@fromState.s [step.fromState.s] .bind .fixfirst .bind 
@step.fromState.s %z$wD [%vrwrwz'owlc] %r?VRW [%%] %r?WLCc

@doc.fromStateE.s "s [s -- ((a*s)+1)] -- a`S; stream from state/stepper in apply environment"
@fromStateE.s applyWrap fromState.s

@doc.enum.s "-- num`S; enumerate from 1..infinity"
@doc.enumFrom.s "start -- num`S; enumerate from start..infinity"
@enum.s 1 enumFrom.s
@enumFrom.s [%v^ 1 %r+wlVc] fromState.s

@test.enumFrom.s
    97 enumFrom.s 26 take.s
    "abcdefghijklmnopqrstuvwxyz"
    assertTextEQ1
@test.enum.s
    0 enum.s [.add] 20 forCount.s
    drop2 210 assertEQ1.n  

@doc.fmap.s "a`S [a → b] -- b`S; map a pure function over a stream"
@fmap.s [step.fmap.s] .bind .fixfirst .bind
@step.fmap.s %lw %vvrwlcw$ %wD [onElem.fmap.s] %r?VRW [%%] %r?WLCc
@onElem.fmap.s %rz$vrwrw'owlc
@doc..fmap.s "([a → b] * (a`S * e))→(b`S * e); map stream primitive"
@.fmap.s [step.fmap.s] %r %w'o .firstfixfirst %w'o

@test.fmap.s
 "hello" fromList.s
 4 [add\2] .bind fmap.s
 toList.s
 "lipps" assertEQ1

@doc.fmapE.s "a`S [a -- b] -- b`S; map function in basic `apply` environment"
@fmapE.s applyWrap fmap.s

@doc.map.s doc.fmapE.s
@map.s fmapE.s


@doc.pmap.s "a`S [a ↣ b] -- b`S; fold a process over a stream"
@pmap.s [step.pmap.s] .fixfirst .bind .bind
@step.pmap.s %wlwvvrwlcw$wD [onElem.pmap.s] %r?VRW [%%] %r?WLCc
@onElem.pmap.s %rz$rz'ovrwrwz'owlc
@doc..pmap.s  "([a↣b]*(a`S*e))→(b`S*e); fold process over stream in primitive environment"
@.pmap.s [step.pmap.s] %r .firstfixfirst %w'o %w'o

@doc.addend.s "a`S a`S -- a`S; compose streams end-to-end (stream at top of stack runs last)"
@addend.s [step.addend.s] .fixfirst .bind .bind
@step.addend.s %lwvvrwlcw$wD [onElem.addend.s] %r?VRW [onFini.addend.s] %r?WLCMc
@onElem.addend.s %rw'ovrwrwz'owlVc
@onFini.addend.s %r%vr$c
@doc..addend.s "(a`S*(a`S*e))→(a`S*e); addend streams (ABC layer stack)"
@.addend.s [step.addend.s] %r .firstfixfirst %w'o %w'o

@test.addend.s#empty 
 empty.s empty.s addend.s 
 intro1 .applyd assertInR elim1
@test.addend.s
 "hello," " world!" [fromList.s] bi& 
 addend.s toList.s
 "hello, world!" assertTextEQ1

@doc.flatten.s "(a`S)`S -- a`S; flatten a stream of streams"
@flatten.s [step.flatten.s] .fixfirst .bind
@step.flatten.s %wvvrwlcw$wD [onElem.flatten.s] %r?VRW [%% .inR] %r?WLCMc
@onElem.flatten.s %wvrwrw'o .addend.s %vr$c
@.flatten.s [step.flatten.s] %r .firstfixfirst %w'o

@test.flatten.s
  empty.l 
  "" cons.l
  "!" cons.l
  "" cons.l
  "" cons.l
  "world" cons.l
  ", " cons.l
  "hello" cons.l
  [fromList.s] map.l
  fromList.s flatten.s toList.s
  "hello, world!" assertTextEQ1

@doc.lefts.s 
"Filter a stream, keeping only the left elements.
 
     (a+b)`S -- a`S     (requires droppable b)
 
 In the general case, this is unsafe... e.g. if we filter an infinite stream where all the elements might be in the right, we'll diverge, which is an error. Developers must be careful with filtering of simple streams.
~
@lefts.s [toS.lefts.s] map.s flatten.s
@toS.lefts.s [singleton.s] [drop empty.s] if

@doc.rights.s "(a+b)`S -- b`S; see `doc.lefts.s`"
@rights.s [toS.rights.s] map.s flatten.s
@toS.rights.s [drop empty.s] [singleton.s] if

@test.rights.s
  "Hello, World!" fromList.s
  [108 .lt1] map.s rights.s
  toList.s "He, Wd!" assertTextEQ1

@test.lefts.s 
  "Hello, World!" fromList.s
  [108 .lt1] map.s lefts.s
  toList.s "lloorl" assertTextEQ1
  
@doc.filterWith.s "a`S [a -- (b+c)] -- c`S; Droppable b"
@filterWith.s [toS.rights.s] compose map.s flatten.s
@test.filterWith.s
  "Hello, World!" fromList.s
  [108 .gte1] filterWith.s
  toList.s "lloorl" assertTextEQ1

@doc.filterBy.s  "a`S [a -- Bool] -- c`S; Copyable & Droppable a"
@filterBy.s [dup] [toS.filterBy.s] wrapfn map.s flatten.s
@toS.filterBy.s [drop empty.s] [singleton.s] if_
@test.filterBy.s
  "Hello, World!" fromList.s
  [108 .ltb] filterBy.s
  toList.s "He, Wd!" assertTextEQ1

@doc.forCount.s "a`S [a--] count -- a`S count(rem)"
@forCount.s assertNatural swap [step.forCount.s] bind fixpoint inline

@step.forCount.s take2 dup 0 gt [stopOnCount.forCount.s] [tryElem.forCount.s] if_
@stopOnCount.forCount.s discard2
@tryElem.forCount.s take intro1 .applyd [onElem.forCount.s] [stopOnElem.forCount.s] if
@onElem.forCount.s wx put dec put2 dip3 inline
@stopOnElem.forCount.s elim1 empty.s put discard2

@test.forCount.s#stopOnCount
    empty.l
    "hello world" fromList.s
    [cons.l] 4 forCount.s
    0         assertEQ1.n
    "o world" fromList.s assertEQ1d
    "lleh"    assertEQ1dd
@test.forCount.s#stopOnElem
    empty.l
    "hello world" fromList.s
    [cons.l] 15 forCount.s
    4             assertEQ1.n
    empty.s       assertEQ1d
    "dlrow olleh" assertEQ1dd

@doc.take.s "a`S count -- a`S a`L; take count items from stream"
@take.s inner.take.s drop swap reverse.l
@inner.take.s empty.l unrot [cons.l] swap forCount.s

@doc.rn.take.s "a`S count -- a`S a(reversed)`L count(remaining)"
@rn.take.s inner.take.s swapd

@doc.taking.s "a`S count -- (a`L)`S; form a stream of lists of size count (last list might be smaller)" 
@taking.s assertNatural+ [step.taking.s] bind fromStateE.s
@step.taking.s take.s [inL p inL] [inR dropd] if

@doc.takeExact.s 
"a`S count -- a`S a`L
 take exactly count items from stream, 
 or take none and return the empty list.
~
@takeExact.s
 empty.l unrot [cons.l] swap forCount.s
 0 gt [undo.takeExact.s] when_
 swap reverse.l
@undo.takeExact.s swap [cons.s] each.l empty.l swap
 

@doc.zipRem.s
"Zip two streams of unknown relative size. If they are of equal size, all elements will be returned in the left. If streams are of unequal size, we'll return the longer, remaining stream in the right (as the final element in the stream).
 
   a`S b`S -- ((a*b)+(a`S+b`S))`S 
 
 I have contemplated a variation on streams that always return a value on termination. However, it is not clear how one would go about composing those streams in other ways (e.g. `addend` is a little unclear). This results in an awkward construction to handle streams of different sizes.
~
@zipRem.s pw [next.zipRem.s] fromStateE.s
@next.zipRem.s 
 wx 
 intro1 .applyd .rw
 intro1 .applyd .wl
 [onB.zipRem.s] [noB.zipRem.s] if
@onB.zipRem.s .rw [.wl onAB.zipRem.s] [.wl onB-A.zipRem.s] if
@noB.zipRem.s .rw [.wl onA-B.zipRem.s] [.wl noAB.zipRem.s] if
@onAB.zipRem.s dx x swapd pw inL dpw p inL
@onB-A.zipRem.s .rw elim1 .wl x cons.s inR inR lastElem.zipRem.s
@onA-B.zipRem.s elim1 x cons.s inL inR lastElem.zipRem.s
@lastElem.zipRem.s empty.s dup pw pw inL
@noAB.zipRem.s drop2 intro1 inR

@doc.zip.s "a`S b`S -- (a*b)`S; truncate larger stream (which must be droppable)"
@zip.s pw [next.zip.s] fromStateE.s
@next.zip.s wx intro1 .applyd [onB.zip.s] [done.zip.s] if
@onB.zip.s .rw intro1 .applyd [.wl onAB.zip.s] [.wl done.zip.s] if
@onAB.zip.s dx x swapd pw dpw p inL
@done.zip.s drop2 intro1 inR


