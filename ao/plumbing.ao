
@doc.id " -- "
@doc.dup "(Copyable x) ⇒ x -- x x"
@doc.dupd "(Copyable x) ⇒ x y -- x x y"
@doc.over "(Copyable x) ⇒ x y -- x y x"
@doc.tuck "(Copyable y) ⇒ x y -- y x y"
@doc.pick "(Copyable x) ⇒ x y z -- x y z x"
@doc.drop "(Droppable x) ⇒ x -- "
@doc.nip  "(Droppable x) ⇒ x y -- y"
@doc.nip2 "(Droppable x,y) ⇒ x y z -- z"
@doc.swap "y x -- x y"
@doc.swapd "x y z -- y x z"
@doc.rot "x y z -- y z x"
@doc.unrot "y z x -- x y z"
@doc.roll "w x y z -- x y z w"
@doc.unroll "x y z w -- w x y z"
@doc.spin "x y z -- z y x"
@doc.intro1 " -- Unit"
@doc.elim1 "Unit -- "

@id 
@dup %r^wzlwl
@dupd swap dup rot
@over swap dup swapd
@tuck swap over
@pick %rw over %wl swap
@drop %r%
@nip  %rw drop  %wl
@nip2 %rw drop2 %wl
@nip3 %rw drop3 %wl
@nip4 %rw drop4 %wl
@dropd swap drop
@swap  %rwrwzwlwl
@swapd %rw swap %wl
@rot swapd swap
@unrot swap swapd
@spin swap swapd swap
@roll %rw rot %wl swap
@unroll swap %rw unrot %wl
@intro1 %vvrwlcl
@elim1 %rvrwlcc

@rotd %rw rot %wl
@rolld %rw roll %wl
@unrotd %rw unrot %wl
@unrolld %rw unroll %wl

@roll2 swap
@roll3 rot
@roll4 roll
@roll5 pw roll4 dwx
@roll6 pw roll5 dwx
@roll7 pw roll6 dwx

@roll2d swapd
@roll3d rotd
@roll4d rolld
@roll5d %rw roll5 %wl
@roll6d %rw roll6 %wl
@roll7d %rw roll7 %wl

@unroll2 swap
@unroll3 unrot
@unroll4 unroll
@unroll5 dpw unroll4 wx
@unroll6 dpw unroll5 wx
@unroll7 dpw unroll6 wx

@unroll2d swapd
@unroll3d unrotd
@unroll4d unrolld
@unroll5d %rw unroll5 %wl
@unroll6d %rw unroll6 %wl
@unroll7d %rw unroll7 %wl

@test.unroll7
  1 2 3 4 5 6 7 unroll7
  6 assertEQ1 drop6
  7 assertEQ1 drop

@test.roll7
  1 2 3 4 5 6 7 roll7
  1 assertEQ1 drop
  7 assertEQ1 drop
  6 assertEQ1 drop5

@over2 roll2 dup unroll2d
@over3 roll3 dup unroll3d
@over4 roll4 dup unroll4d
@over5 roll5 dup unroll5d
@over6 roll6 dup unroll6d
@over7 roll7 dup unroll7d

@doc.drop2 "(Droppable x,y) ⇒ x y -- "
@doc.drop3 "(Droppable x,y,z) ⇒ x y z -- "
@doc.drop4 "(Droppable w,x,y,z) ⇒ w x y z -- "
@drop2 drop drop
@drop3 drop drop drop
@drop4 drop drop drop drop
@drop5 drop2 drop3
@drop6 drop3 drop3
@drop7 drop4 drop3
@drop8 drop4 drop4
@drop9 drop6 drop3

@doc.swap2 "a b c d -- c d a b"
@doc.swap3 "a b c d e f -- d e f a b c"
@doc.swap4 "a b c d e f g h -- e f g h a b c d"
@swap2 p     dp       swap dx       x
@swap3 p p   dp dp    swap dx dx    x x
@swap4 p p p dp dp dp swap dx dx dx x x x

@test.swap3
 1 2 3 4 5 6 swap3
 3 assertEQ1 drop
 2 assertEQ1 drop
 1 assertEQ1 drop
 6 assertEQ1 drop
 5 assertEQ1 drop
 4 assertEQ1 drop

@doc.dup2 "(Copyable x,y) ⇒ x y -- x y x y"
@doc.dup3 "(Copyable x,y,z) ⇒ x y z -- x y z x y z"
@doc.dup4 "(Copyable w,x,y,z) ⇒ w x y z -- w x y z w x y z"
@dup2 pw dup %rw wx %wl wx
@dup3 pw pw dup %rw wx wx %wl wx wx
@dup4 pw pw pw dup %rw wx wx wx %wl wx wx wx
@dup5 pw pw pw pw dup %rw wx wx wx wx %wl wx wx wx wx
@dup6 pw pw pw pw pw dup %rw wx wx wx wx wx %wl wx wx wx wx wx
@dup7 pw pw pw pw pw pw dup %rw wx wx wx wx wx wx %wl wx wx wx wx wx wx

@dup2.alt %rw dup  %wl dup unroll2d
@dup3.alt %rw dup2 %wl dup unroll3d
@dup4.alt %rw dup3 %wl dup unroll4d
@dup5.alt %rw dup4 %wl dup unroll5d
@dup6.alt %rw dup5 %wl dup unroll6d
@dup7.alt %rw dup6 %wl dup unroll7d

@eqv.dup2 [dup2] [dup2.alt]
@eqv.dup3 [dup3] [dup3.alt]
@eqv.dup4 [dup4] [dup4.alt]
@eqv.dup5 [dup5] [dup5.alt]
@eqv.dup6 [dup6] [dup6.alt]
@eqv.dup7 [dup7] [dup7.alt]

@doc.ShorthandDataShuffling
"A few short data shufflers for an object on the stack, to compactly support simple manipulations. These operations include:
 
     p :: y x -- (x*y)
     x :: (x*y) -- y x
     w :: (x*y) -- (y*x)
     z :: ((a*b)*(c*d)) -- ((a*c)*(b*d))
     l :: (a*(b*c)) -- ((a*b)*c)
     r :: ((a*b)*c) -- (a*(b*c))
 
  Common combinations are also defined, such as `pw` and `wx`, which pair or extract the second element. The meanings here aren't quite the same as in ABC under the hood, but they are sometimes useful.
~
@doc.p "y x -- (x*y)"
@doc.x "(x*y) -- y x"
@doc.w "(x*y) -- (y*x)"
@doc.l "(x*(y*z)) -- ((x*y)*z)"
@doc.r "((x*y)*z) -- (x*(y*z))"
@p %rwrzwll
@x %rrwzlwl
@w %rrwll
@l %rrwrzwlll
@r %rrrwzlwll
@pw p w
@wx w x
@dp unrot p swap
@dx swap x rot
@dw swap w swap
@dpw unrot pw swap
@dwx swap wx rot
@dl swap l swap
@dr swap r swap

@doc.zip2 "(c*d) (a*b) -- (b*d) (a*c)"
@zip2 dx x swapd p dp

@test.zip2 5 6 pw 7 8 pw zip2 7 5 pw assertEQ1

@doc..swap "(x*y)→(y*x); primitive swap"
@.swap %vrwlc

@doc..fst "(x*y)→x"
@doc..snd "(x*y)→y"
@.fst %vrw%c
@.snd %vr%c
@doc.fst "(x*y) -- x"
@doc.snd "(x*y) -- y"
@fst %rrw%l
@snd %rr%l

@doc.dupfst "(x*y) -- (x*y) x"
@doc.dupsnd "(x*y) -- (x*y) y"
@dupfst x dup dp
@dupsnd wx dup dpw

@eqv.fst.wxdrop [fst] [wx drop]
@eqv.snd.xdrop [snd] [x drop]

@id.wl³ w l w l w l
@id..wl³ .swap %l .swap %l .swap %l
@id.wr³ w r w r w r
@id..wr³ .swap %r .swap %r .swap %r
@id.lw³ l w l w l w
@id..lw³ %l .swap %l .swap %l .swap
@id.rw³ r w r w r w
@id..rw³ %r .swap %r .swap %r .swap
@id.lr l r
@id.rl r l

@id.zip2 zip2 zip2
@id.swap swap swap
@id.swapd swapd swapd
@id.rot rot rot rot
@id.unrot unrot unrot unrot
@id.roll roll roll roll roll
@id.unroll unroll unroll unroll unroll
@id.spin spin spin
@id.introElim intro1 elim1
@id.elimIntro elim1 intro1
@id.px p x
@id.xp x p
@id.ww w w
@id.pwxswap p w x swap
@id.swappwx swap p w x
@id.dupdrop dup drop
@id.dupSwapDrop dup swap drop
@id.dupSwapdDropSwap dup swapd drop swap
@id.dup2drop2 dup2 drop2


@eqv.swap.pwx [p w x] [swap]
@eqv.p1drop2 [p drop] [drop2]
@eqv.p2drop3 [p p drop] [drop3]
@eqv.p3drop4 [p p p drop] [drop4]
@eqv.pw2drop3 [pw pw drop] [drop3]
@eqv.dupSwap [dup swap] [dup]

@doc.v_ "(a*e)→((a*1)*e); ~ `[%v]$`"
@doc.c_ "((a*1)*e)→(a*e); ~ `[%c]$`"
@doc.l_ "((a*(b*c))*e)→(((a*b)*c)*e); ~ `[%l]$`"
@doc.r_ "(((a*b)*c)*e)→((a*(b*c))*e); ~ `[%r]$`"
@doc.w_ "((a*(b*c))*e)→((b*(a*c))*e); ~ `[%w]$`"
@doc.z_ "((a*(b*(c*d)))*e)→((a*(c*(b*d)))*e); ~ `[%z]$`"

@v_ %vrwvrwlc
@c_ %vrwlcwlc
@l_ %rwrzwll
@r_ %rrwzlwl
@w_ %rwrwzwlwl
@z_ %rw w_ %wl

@v__ v_ r_ w_ v_ r_ w_ l_ c_
@c__ v_ r_ w_ l_ c_ w_ l_ c_
@l__ r_ w_ r_ z_ w_ l_ l_
@r__ r_ r_ w_ z_ l_ w_ l_
@w__ r_ w_ r_ w_ z_ w_ l_ w_ l_
@z__ r_ w_ w__ w_ l_
@vrwlc__ v__ r__ w__ l__ c__

@v___ v__ r__ w__ v__ r__ w__ l__ c__
@c___ v__ r__ w__ l__ c__ w__ l__ c__
@l___ r__ w__ r__ z__ w__ l__ l__
@r___ r__ r__ w__ z__ l__ w__ l__
@w___ r__ w__ r__ w__ z__ w__ l__ w__ l__
@z___ r__ w__ w___ w__ l__
@vrwlc___ v___ r___ w___ l___ c___

@v$ [%v]%r$
@c$ [%c]%r$
@l$ [%l]%r$
@r$ [%r]%r$
@w$ [%w]%r$
@z$ [%z]%r$

@eqv.inline.v [v$] [v_]
@eqv.inline.c [c$] [c_]
@eqv.inline.r [r$] [r_]
@eqv.inline.l [l$] [l_]
@eqv.inline.w [w$] [w_]
@eqv.inline.z [z$] [z_]

@eqv.inner.v_ [%r v_ %l] [v__]
@eqv.inner.c_ [%r c_ %l] [c__]
@eqv.inner.l_ [%r l_ %l] [l__]
@eqv.inner.r_ [%r r_ %l] [r__]
@eqv.inner.w_ [%r w_ %l] [w__]
@eqv.inner.z_ [%r z_ %l] [z__]
@eqv.vrwlc__.rrwll [%rrwll] [vrwlc__]
@test.gratuitousDeepShuffle 5 6 pw dup vrwlc__ w assertEQ1

@eqv.inner.v__ [%r v__ %l] [v___]
@eqv.inner.c__ [%r c__ %l] [c___]
@eqv.inner.l__ [%r l__ %l] [l___]
@eqv.inner.r__ [%r r__ %l] [r___]
@eqv.inner.w__ [%r w__ %l] [w___]
@eqv.inner.z__ [%r z__ %l] [z___]
@eqv.vrwlc___.rrrwlll [%rrrwlll] [vrwlc___]
@test.gratuitousDeeperShuffle 4 5 6 pw p dup vrwlc___ x w p assertEQ1

@eqv.rrrwlll.xwp [%rrrwlll] [x w p]
