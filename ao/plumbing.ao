lispy

@doc.id "a→a; same as whitespace"
@doc.dup "(Copyable x) ⇒ x -- x x"
@doc.dupd "(Copyable x) ⇒ x y -- x x y"
@doc.over "(Copyable x) ⇒ x y -- x y x"
@doc.tuck "(Copyable y) ⇒ x y -- y x y"
@doc.pick "(Copyable x) ⇒ x y z -- x y z x"
@doc.drop "(Droppable x) ⇒ x -- "
@doc.nip  "(Droppable x) ⇒ x y -- y"
@doc.nip2 "(Droppable x,y) ⇒ x y z -- z"
@doc.swap "y x -- x y"
@doc.swapd "x y z -- y x z"
@doc.rot "x y z -- y z x"
@doc.unrot "y z x -- x y z"
@doc.roll "w x y z -- x y z w"
@doc.unroll "x y z w -- w x y z"
@doc.spin "x y z -- z y x"
@doc.intro1 " -- Unit"
@doc.elim1 "Unit -- "

@id 
@dup  %r^zlwl
@dupd .rw dup .wl 
@over dupd swap
@tuck dup swapd
@pick .rw over .wl swap
@drop %r%
@nip  .rw drop  .wl 
@nip2 .rw drop2 .wl 
@nip3 .rw drop3 .wl 
@nip4 .rw drop4 .wl 
@dropd nip
@swap  %rwrwzwlwl
@swapd .rw swap .wl 
@rot swapd swap
@unrot swap swapd
@spin swap swapd swap
@roll .rw rot .wl swap
@unroll swap .rw unrot .wl 
@intro1 %vvrwlcl
@elim1 %rvrwlcc
@unit intro1


@pick1  dup
@pick2 .rw pick1 .wl swap
@pick3 .rw pick2 .wl swap
@pick4 .rw pick3 .wl swap
@pick5 .rw pick4 .wl swap
@pick6 .rw pick5 .wl swap
@pick7 .rw pick6 .wl swap

@eqv.tuck#1 [tuck] [dup unrot]
@eqv.tuck#2 [tuck] [swap over]

@rotd .rw rot .wl 
@rolld .rw roll .wl 
@unrotd .rw unrot .wl 
@unrolld .rw unroll .wl 
@intro1d .rw intro1 .wl
@elim1d .rw elim1 .wl

@roll2 swap
@roll3 rot
@roll4 roll
@roll5 .rw roll4 .wl swap 
@roll6 .rw roll5 .wl swap
@roll7 .rw roll6 .wl swap
@roll8 .rw roll7 .wl swap
@roll9 .rw roll8 .wl swap

@roll2d swapd
@roll3d rotd
@roll4d rolld
@roll5d .rw roll5 .wl 
@roll6d .rw roll6 .wl 
@roll7d .rw roll7 .wl 
@roll8d .rw roll8 .wl 
@roll9d .rw roll9 .wl 

@unroll2 swap
@unroll3 unrot
@unroll4 unroll
@unroll5 swap .rw unroll4 .wl 
@unroll6 swap .rw unroll5 .wl 
@unroll7 swap .rw unroll6 .wl 
@unroll8 swap .rw unroll7 .wl 
@unroll9 swap .rw unroll8 .wl 

@unroll2d swapd
@unroll3d unrotd
@unroll4d unrolld
@unroll5d .rw unroll5 .wl 
@unroll6d .rw unroll6 .wl 
@unroll7d .rw unroll7 .wl 
@unroll8d .rw unroll8 .wl 
@unroll9d .rw unroll9 .wl 

@test.unroll7
  1 2 3 4 5 6 7 unroll7
  6 assertEQ1 drop6
  7 assertEQ1 drop

@test.roll7
  1 2 3 4 5 6 7 roll7
  1 assertEQ1 drop
  7 assertEQ1 drop
  6 assertEQ1 drop5


@doc.digN 
"The digN combinators are perhaps a better name for roll, since it more clearly connotates that we're dragging some value upwards from the depths of the stack. digN will correspond to roll(N-1); we're accessing the Nth element under the top of the stack.
 
         dig3 :: d c b a -- c b a d
 
 The reverse operation is buryN. The 'digNd' combinators will dip below the top element on the stack.
~
@dig1 roll2
@dig2 roll3
@dig3 roll4
@dig4 roll5
@dig5 roll6
@dig6 roll7
@dig7 roll8
@dig8 roll9

@dig1d roll2d
@dig2d roll3d
@dig3d roll4d
@dig4d roll5d
@dig5d roll6d
@dig6d roll7d
@dig7d roll8d
@dig8d roll9d

@doc.buryM
"The buryN combinators bury the top element from the stack, reversing the corresponding digN operation. This is perhaps a better name than 'unroll'.
~
@bury1 unroll2
@bury2 unroll3
@bury3 unroll4
@bury4 unroll5
@bury5 unroll6
@bury6 unroll7
@bury7 unroll8
@bury8 unroll9

@bury1d unroll2d
@bury2d unroll3d
@bury3d unroll4d
@bury4d unroll5d
@bury5d unroll6d
@bury6d unroll7d
@bury7d unroll8d
@bury8d unroll9d

@over2 roll2 dup unroll2d
@over3 roll3 dup unroll3d
@over4 roll4 dup unroll4d
@over5 roll5 dup unroll5d
@over6 roll6 dup unroll6d
@over7 roll7 dup unroll7d

@doc.drop2 "(Droppable x,y) ⇒ x y -- "
@doc.drop3 "(Droppable x,y,z) ⇒ x y z -- "
@doc.drop4 "(Droppable w,x,y,z) ⇒ w x y z -- "
@drop2 drop drop
@drop3 drop drop drop
@drop4 drop drop drop drop
@drop5 drop2 drop3
@drop6 drop3 drop3
@drop7 drop4 drop3
@drop8 drop4 drop4
@drop9 drop6 drop3

@doc.swap2 "a b c d -- c d a b"
@doc.swap3 "a b c d e f -- d e f a b c"
@doc.swap4 "a b c d e f g h -- e f g h a b c d"
@swap2 p     dp       swap dx       x
@swap3 p p   dp dp    swap dx dx    x x
@swap4 p p p dp dp dp swap dx dx dx x x x

@test.swap3
 1 2 3 4 5 6 swap3
 3 assertEQ1 drop
 2 assertEQ1 drop
 1 assertEQ1 drop
 6 assertEQ1 drop
 5 assertEQ1 drop
 4 assertEQ1 drop

@doc.dup2 "(Copyable x,y) ⇒ x y -- x y x y"
@doc.dup3 "(Copyable x,y,z) ⇒ x y z -- x y z x y z"
@doc.dup4 "(Copyable w,x,y,z) ⇒ w x y z -- w x y z w x y z"
@dup2 pw   dup   dwx   wx
@dup3 pw pw   dup   dwx dwx   wx wx
@dup4 pw pw pw   dup   dwx dwx dwx   wx wx wx
@dup5 pw pw pw pw   dup   dwx dwx dwx dwx   wx wx wx wx
@dup6 pw pw pw pw pw   dup   dwx dwx dwx dwx dwx   wx wx wx wx wx
@dup7 pw pw pw pw pw pw   dup   dwx dwx dwx dwx dwx dwx   wx wx wx wx wx wx
@dup8 pw pw pw pw pw pw pw   dup   dwx dwx dwx dwx dwx dwx dwx   wx wx wx wx wx wx wx

@dup2.alt .rw dup      .wl dup unroll2d
@dup3.alt .rw dup2.alt .wl dup unroll3d
@dup4.alt .rw dup3.alt .wl dup unroll4d
@dup5.alt .rw dup4.alt .wl dup unroll5d
@dup6.alt .rw dup5.alt .wl dup unroll6d
@dup7.alt .rw dup6.alt .wl dup unroll7d

@eqv.dup2 [dup2] [dup2.alt]
@eqv.dup3 [dup3] [dup3.alt]
@eqv.dup4 [dup4] [dup4.alt]
@eqv.dup5 [dup5] [dup5.alt]
@eqv.dup6 [dup6] [dup6.alt]
@eqv.dup7 [dup7] [dup7.alt]

@doc.ShorthandDataShuffling
"A few short data shufflers for an object on the stack, to compactly support simple manipulations. These operations include:
 
         p :: y x -- (x*y)
         x :: (x*y) -- y x
         w :: (x*y) -- (y*x)
         l :: (a*(b*c)) -- ((a*b)*c)
         r :: ((a*b)*c) -- (a*(b*c))
         wc :: (a*(b*c)) -- (b*(a*c))
         zc :: (a*(b*(c*d))) -- (a*(c*(b*d)))
 
  Common combinations are also defined, such as `pw` and `wx`, which pair or extract the second element. The meaning for `w` is not quite the same as the ABC under the hood, corresponding to a simple pair-swap behavior. But it's very useful to avoid unit allocations.
~
@doc.p "y x -- (x*y)"
@doc.x "(x*y) -- y x"
@doc.w "(x*y) -- (y*x)"
@doc.l "(x*(y*z)) -- ((x*y)*z)"
@doc.r "((x*y)*z) -- (x*(y*z))"
@doc.wc "(a*(b*c)) -- (b*(a*c))"
@doc.zc "(a*(b*(c*d))) -- (a*(c*(b*d)))"
@p %rwrzwll
@x %rrwzlwl
@w %rrwll
@l %rrwrzwlll
@r %rrrwzlwll
@wc %rrwrwzwlwll
@zc %rrwrwrwzwlwlwll

@pw p w
@wx w x
@dp  .rw p  .wl 
@dx  .rw x  .wl 
@dw  .rw w  .wl 
@dpw .rw pw .wl 
@dwx .rw wx .wl 
@dl  .rw l  .wl 
@dr  .rw r  .wl 
@dwc .rw wc .wl
@dzc .rw zc .wl

@doc..rw "((a*s)*e)→(s*(a*e)); simpler version of 'take' if we don't need environment other than stack"
@doc..wl "(s*(a*e))→((a*s)*e); simpler version of 'put' if we don't need environment other than stack"
@.rw %rw
@.wl %wl

@doc.zip2 "(c*d) (a*b) -- (b*d) (a*c)"
@zip2 dx x swapd p dp

@test.zip2 5 6 pw 7 8 pw zip2 7 5 pw assertEQ1

@doc..swap "(x*y)→(y*x); primitive swap"
@.swap %vrwlc

@doc..fst "(x*y)→x"
@doc..snd "(x*y)→y"
@.fst %vrw%c
@.snd %vr%c
@doc.fst "(x*y) -- x"
@doc.snd "(x*y) -- y"
@fst %rrw%l
@snd %rr%l

@doc.dupfst "(x*y) -- (x*y) x; see also 'car' (family of similar functions)"
@doc.dupsnd "(x*y) -- (x*y) y; see also 'cdr' (family of similar functions)"
@dupfst x dup dp
@dupsnd wx dup dpw

@eqv.fst.wxdrop [fst] [wx drop]
@eqv.snd.xdrop [snd] [x drop]

@eqv.id.wl³ [w l w l w l] []
@eqv.id..wl³ [.swap %l .swap %l .swap %l] []
@eqv.id.wr³ [w r w r w r] []
@eqv.id..wr³ [.swap %r .swap %r .swap %r] []
@eqv.id.lw³ [l w l w l w] []
@eqv.id..lw³ [%l .swap %l .swap %l .swap] []
@eqv.id.rw³ [r w r w r w] []
@eqv.id..rw³ [%r .swap %r .swap %r .swap] []
@eqv.id.lr [l r] []
@eqv.id.rl [r l] []

@eqv.id.wc [wc wc] []
@eqv.id.zc [zc zc] []
@eqv.wc.lxwpr [wc] [l x w p r]
@eqv.zwzc.wzwc [wc zc wc] [zc wc zc]
@eqv.zc.wxwcpw [zc] [wx wc pw]
@eqv.zc.wx^3_swapd_pw^3 [zc] [wx wx wx swapd pw pw pw]

@eqv.id.zip2 [zip2 zip2] []
@eqv.id.swap [swap swap] []
@eqv.id.swapd [swapd swapd] []
@eqv.id.rot [rot rot rot] []
@eqv.id.unrot [unrot unrot unrot] []
@eqv.id.roll [roll roll roll roll] []
@eqv.id.unroll [unroll unroll unroll unroll] []
@eqv.id.spin [spin spin] []
@eqv.id.introElim [intro1 elim1] []
@eqv.id.elimIntro [elim1 intro1] []
@eqv.id.px [p x] []
@eqv.id.xp [x p] []
@eqv.id.ww [w w] []
@eqv.id.pwxswap [p w x swap] []
@eqv.id.swappwx [swap p w x] []
@eqv.id.dupdrop [dup drop] []
@eqv.id.dupSwapDrop [dup swap drop] []
@eqv.id.dupSwapdDropSwap [dup swapd drop swap] []
@eqv.id.dup2drop2 [dup2 drop2] []


@eqv.swap.pwx [p w x] [swap]
@eqv.p1drop2 [p drop] [drop2]
@eqv.p2drop3 [p p drop] [drop3]
@eqv.p3drop4 [p p p drop] [drop4]
@eqv.pw2drop3 [pw pw drop] [drop3]
@eqv.dupSwap [dup swap] [dup]

@doc.v_ "(a*e)→((a*1)*e); ~ `[%v]$`"
@doc.c_ "((a*1)*e)→(a*e); ~ `[%c]$`"
@doc.l_ "((a*(b*c))*e)→(((a*b)*c)*e); ~ `[%l]$`"
@doc.r_ "(((a*b)*c)*e)→((a*(b*c))*e); ~ `[%r]$`"
@doc.w_ "((a*(b*c))*e)→((b*(a*c))*e); ~ `[%w]$`"
@doc.z_ "((a*(b*(c*d)))*e)→((a*(c*(b*d)))*e); ~ `[%z]$`"

@v_ %vrwvrwlc
@c_ %vrwlcwlc
@l_ %rwrzwll
@r_ %rrwzlwl
@w_ %rwrwzwlwl
@z_ .rw w_ .wl 

@v__ v_ r_ w_ v_ r_ w_ l_ c_
@c__ v_ r_ w_ l_ c_ w_ l_ c_
@l__ r_ w_ r_ z_ w_ l_ l_
@r__ r_ r_ w_ z_ l_ w_ l_
@w__ r_ w_ r_ w_ z_ w_ l_ w_ l_
@z__ r_ w_ w__ w_ l_
@vrwlc__ v__ r__ w__ l__ c__

@v___ v__ r__ w__ v__ r__ w__ l__ c__
@c___ v__ r__ w__ l__ c__ w__ l__ c__
@l___ r__ w__ r__ z__ w__ l__ l__
@r___ r__ r__ w__ z__ l__ w__ l__
@w___ r__ w__ r__ w__ z__ w__ l__ w__ l__
@z___ r__ w__ w___ w__ l__
@vrwlc___ v___ r___ w___ l___ c___

@v$ [%v]%r$
@c$ [%c]%r$
@l$ [%l]%r$
@r$ [%r]%r$
@w$ [%w]%r$
@z$ [%z]%r$

@eqv.inline.v [v$] [v_]
@eqv.inline.c [c$] [c_]
@eqv.inline.r [r$] [r_]
@eqv.inline.l [l$] [l_]
@eqv.inline.w [w$] [w_]
@eqv.inline.z [z$] [z_]

@eqv.inner.v_ [%r v_ %l] [v__]
@eqv.inner.c_ [%r c_ %l] [c__]
@eqv.inner.l_ [%r l_ %l] [l__]
@eqv.inner.r_ [%r r_ %l] [r__]
@eqv.inner.w_ [%r w_ %l] [w__]
@eqv.inner.z_ [%r z_ %l] [z__]
@eqv.vrwlc__.rrwll [%rrwll] [vrwlc__]
@test.gratuitousDeepShuffle 5 6 pw dup vrwlc__ w assertEQ1

@eqv.inner.v__ [%r v__ %l] [v___]
@eqv.inner.c__ [%r c__ %l] [c___]
@eqv.inner.l__ [%r l__ %l] [l___]
@eqv.inner.r__ [%r r__ %l] [r___]
@eqv.inner.w__ [%r w__ %l] [w___]
@eqv.inner.z__ [%r z__ %l] [z___]
@eqv.vrwlc___.rrrwlll [%rrrwlll] [vrwlc___]
@test.gratuitousDeeperShuffle 4 5 6 pw p dup vrwlc___ x w p assertEQ1

@eqv.rrrwlll.xwp [%rrrwlll] [x w p]

@eqv.zwz_.wzw_ [w_ z_ w_] [z_ w_ z_]

