
@doc.Loops
"Loops in AO are modeled as words that repeatedly copy and apply a block until some halting condition is observed. Example loop words:
 
 * each - apply block with each element in list
 * repeat - inline block a given number of times
 * enum - like repeat, but with an index
 * while (or until) - loop while (or until) condition is observed
 
 These words are ultimately derived from fixpoint combinators, which are notoriously difficult to grok. Fortunately, it is not difficult to learn and use a loop word, nor to build new loop words above existing ones. Any loop variables, such as the block being applied, are hidden from the loop body (cf. `.dip`).
 
 *Note:* Loops in AO are assumed and required to terminate. In general, this condition cannot be proven statically, so it is the responsibility of developers to reason about termination properties or favor idioms that simplify static analysis. AO programs will often be subject to static analysis for termination properties, with a warning being issued if termination could not be decided. 
 
 Long-running behaviors in AO are not expressed as loops. Instead, a long-running application is expressed using an incremental process model or a continuous reactive behavior, within an *implicit* top-level loop (depending on the application model). This design ensures an open-loop, subject to process control, abstraction, composition, and extension.
~

@doc.repeat "[] n --; inline block n times"
@doc.enum  "[i --] n m --; loop with integral index in range [n,m)."
@doc.enum1 "enum in range [n,m] (i.e. including m)"

@test.repeat 4 7 [incd] 3 repeat assertEQ
@repeat assertNatural swap [repeat.step] bind fixpoint inline
@doc.repeat.step "n [continue] [action] -- ; n counting down"
@repeat.step
 rot dup 1 lt
 [rot p swap dip x decd inline]
 [drop3]
 if!

@test.enum 15 0 [.add] 1 5 enum1 assertEQ
@enum1 inc enum
@enum assertEnumRange pw swap [enum.step] bind fixpoint inline
@assertEnumRange swap assertInteger swap assertInteger assertLTE
@doc.enum.step "(n*m) [continue] [action] -- "
@enum.step
 pick x gt
 [drop3]
 [enum.action]
 if!
@enum.action
 pick x dropd swap
 roll roll p swap
 dip
 wx x inc p swap
 inline

@doc.each "a`L [a --] --; apply block to each element in list, left to right"
@doc.map "a`L [a -- b] -- b`L; process each element in list, left to right"

@each [each.step] fixpoint inline
@each.step
 
@map [map.step] fixpoint inline
@map.step


@doc.while1 "b [b -- (a + b)] -- a"
@doc.until1 "a [a -- (a + b)] -- b"
@doc.while  "(a + b) [b -- (a + b)] -- a"
@doc.until  "(a + b) [a -- (a + b)] -- b"

@while [while1] rightE merge
@until [until1] leftE merge
@while1 [not] compose until1
@until1 [.distribE] compose %rvr .until1 %c

@doc.fixpoint
"This fixpoint combinator binds a function to receive itself (in fixpoint form) as an argument on the stack. AO does not allow cyclic definitions, but a fixpoint enables expression of cyclic behavior.
 
     [foo] fixpoint
         is equivalent to
     [[foo] fixpoint foo]
 
 Naturally, if a fixpoint function unconditionally applies itself, the program will diverge. Thus, any fixpoint function should have conditional behavior and a termination condition.
 
 Fixpoint is one of those patterns that people find difficult to comprehend until they've used it many times. I encourage developers to use, learn, and understand it. But in practice it may often be easier to express most behavior in terms of a few loops (map, each, enum, repeat, until, while, etc.) built above fixpoint.
~
@fixpoint fixZ

@doc.fixZ "based on the Z fixpoint combinator"
@fixZ [swap dup bind swap compose] bind dup apply

@doc.fixY "based on the Y fixpoint combinator"
@fixY [swap dup bind swap inline] bind dup bind

@doc.factorial.naive "mostly this is a test for fixpoint :)"
@factorial.naive assertNatural [factorialStep.naive] fixpoint apply
@factorialStep.naive
 take 2 lt
 [tail dup dec put apply .mul]
 [head discard]
 eitherE
 merge
@test.factorial.naive 720 6 factorial.naive assertEQ
